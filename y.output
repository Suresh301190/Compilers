Terminals unused in grammar

   FOR
   CALLOUT
   BREAK
   CONTINUE
   ELSE
   OS
   CS


Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OB method_decls CB

    2 method_decls: method_decls method_decl
    3             | %empty

    4 method_decl: VOID ID OP args CP block
    5            | INT ID OP args CP block
    6            | BOOL ID OP args CP block

    7 args: arg args1
    8     | %empty

    9 args1: COMMA arg args1
   10      | %empty

   11 arg: BOOL ID
   12    | INT ID

   13 block: OB stmts CB

   14 stmts: stmts stmt
   15      | %empty

   16 stmt: expr_a SEMCOL
   17     | IF OP expr_a CP stmt

   18 expr_a: expr_or
   19       | ID ASS expr_or
   20       | ID PASS expr_or
   21       | ID MASS expr_or

   22 expr_or: expr_and
   23        | expr_or OR expr_and

   24 expr_and: expr_eq
   25         | expr_and AND expr_eq

   26 expr_eq: expr_rel
   27        | expr_eq EQ expr_rel
   28        | expr_eq NE expr_rel

   29 expr_rel: expr_pm
   30         | expr_rel LT expr_pm
   31         | expr_rel GT expr_pm
   32         | expr_rel LE expr_pm
   33         | expr_rel GE expr_pm

   34 expr_pm: expr_mdm
   35        | expr_pm PLUS expr_mdm
   36        | expr_pm MINUS expr_mdm

   37 expr_mdm: factor
   38         | expr_mdm MUL factor
   39         | expr_mdm DIV factor
   40         | expr_mdm MOD factor

   41 factor: OP expr_a CP
   42       | NOT factor
   43       | MINUS factor
   44       | literal
   45       | ID

   46 literal: int_literal
   47        | string_literal
   48        | char_literal
   49        | bool_literal


Terminals, with rules where they appear

$end (0) 0
error (256)
CLASS (258) 1
PROGRAM (259) 1
IF (260) 17
FOR (261)
ID (262) 4 5 6 11 12 19 20 21 45
VOID (263) 4
INT (264) 5 12
BOOL (265) 6 11
CALLOUT (266)
BREAK (267)
CONTINUE (268)
ELSE (269)
bool_literal (270) 49
char_literal (271) 48
string_literal (272) 47
int_literal (273) 46
COMMA (274) 9
SEMCOL (275) 16
PLUS (276) 35
MINUS (277) 36 43
MUL (278) 38
DIV (279) 39
MOD (280) 40
LT (281) 30
GT (282) 31
LE (283) 32
GE (284) 33
NE (285) 28
EQ (286) 27
ASS (287) 19
PASS (288) 20
MASS (289) 21
AND (290) 25
OR (291) 23
NOT (292) 42
OP (293) 4 5 6 17 41
CP (294) 4 5 6 17 41
OB (295) 1 13
CB (296) 1 13
OS (297)
CS (298)
UMINUS (299)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
method_decls (47)
    on left: 2 3, on right: 1 2
method_decl (48)
    on left: 4 5 6, on right: 2
args (49)
    on left: 7 8, on right: 4 5 6
args1 (50)
    on left: 9 10, on right: 7 9
arg (51)
    on left: 11 12, on right: 7 9
block (52)
    on left: 13, on right: 4 5 6
stmts (53)
    on left: 14 15, on right: 13 14
stmt (54)
    on left: 16 17, on right: 14 17
expr_a (55)
    on left: 18 19 20 21, on right: 16 17 41
expr_or (56)
    on left: 22 23, on right: 18 19 20 21 23
expr_and (57)
    on left: 24 25, on right: 22 23 25
expr_eq (58)
    on left: 26 27 28, on right: 24 25 27 28
expr_rel (59)
    on left: 29 30 31 32 33, on right: 26 27 28 30 31 32 33
expr_pm (60)
    on left: 34 35 36, on right: 29 30 31 32 33 35 36
expr_mdm (61)
    on left: 37 38 39 40, on right: 34 35 36 38 39 40
factor (62)
    on left: 41 42 43 44 45, on right: 37 38 39 40 42 43
literal (63)
    on left: 46 47 48 49, on right: 44


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OB method_decls CB

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OB method_decls CB

    OB  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OB . method_decls CB

    $default  reduce using rule 3 (method_decls)

    method_decls  go to state 6


State 6

    1 program: CLASS PROGRAM OB method_decls . CB
    2 method_decls: method_decls . method_decl

    VOID  shift, and go to state 7
    INT   shift, and go to state 8
    BOOL  shift, and go to state 9
    CB    shift, and go to state 10

    method_decl  go to state 11


State 7

    4 method_decl: VOID . ID OP args CP block

    ID  shift, and go to state 12


State 8

    5 method_decl: INT . ID OP args CP block

    ID  shift, and go to state 13


State 9

    6 method_decl: BOOL . ID OP args CP block

    ID  shift, and go to state 14


State 10

    1 program: CLASS PROGRAM OB method_decls CB .

    $default  reduce using rule 1 (program)


State 11

    2 method_decls: method_decls method_decl .

    $default  reduce using rule 2 (method_decls)


State 12

    4 method_decl: VOID ID . OP args CP block

    OP  shift, and go to state 15


State 13

    5 method_decl: INT ID . OP args CP block

    OP  shift, and go to state 16


State 14

    6 method_decl: BOOL ID . OP args CP block

    OP  shift, and go to state 17


State 15

    4 method_decl: VOID ID OP . args CP block

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args  go to state 20
    arg   go to state 21


State 16

    5 method_decl: INT ID OP . args CP block

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args  go to state 22
    arg   go to state 21


State 17

    6 method_decl: BOOL ID OP . args CP block

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args  go to state 23
    arg   go to state 21


State 18

   12 arg: INT . ID

    ID  shift, and go to state 24


State 19

   11 arg: BOOL . ID

    ID  shift, and go to state 25


State 20

    4 method_decl: VOID ID OP args . CP block

    CP  shift, and go to state 26


State 21

    7 args: arg . args1

    COMMA  shift, and go to state 27

    $default  reduce using rule 10 (args1)

    args1  go to state 28


State 22

    5 method_decl: INT ID OP args . CP block

    CP  shift, and go to state 29


State 23

    6 method_decl: BOOL ID OP args . CP block

    CP  shift, and go to state 30


State 24

   12 arg: INT ID .

    $default  reduce using rule 12 (arg)


State 25

   11 arg: BOOL ID .

    $default  reduce using rule 11 (arg)


State 26

    4 method_decl: VOID ID OP args CP . block

    OB  shift, and go to state 31

    block  go to state 32


State 27

    9 args1: COMMA . arg args1

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    arg  go to state 33


State 28

    7 args: arg args1 .

    $default  reduce using rule 7 (args)


State 29

    5 method_decl: INT ID OP args CP . block

    OB  shift, and go to state 31

    block  go to state 34


State 30

    6 method_decl: BOOL ID OP args CP . block

    OB  shift, and go to state 31

    block  go to state 35


State 31

   13 block: OB . stmts CB

    $default  reduce using rule 15 (stmts)

    stmts  go to state 36


State 32

    4 method_decl: VOID ID OP args CP block .

    $default  reduce using rule 4 (method_decl)


State 33

    9 args1: COMMA arg . args1

    COMMA  shift, and go to state 27

    $default  reduce using rule 10 (args1)

    args1  go to state 37


State 34

    5 method_decl: INT ID OP args CP block .

    $default  reduce using rule 5 (method_decl)


State 35

    6 method_decl: BOOL ID OP args CP block .

    $default  reduce using rule 6 (method_decl)


State 36

   13 block: OB stmts . CB
   14 stmts: stmts . stmt

    IF              shift, and go to state 38
    ID              shift, and go to state 39
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46
    CB              shift, and go to state 47

    stmt      go to state 48
    expr_a    go to state 49
    expr_or   go to state 50
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 37

    9 args1: COMMA arg args1 .

    $default  reduce using rule 9 (args1)


State 38

   17 stmt: IF . OP expr_a CP stmt

    OP  shift, and go to state 58


State 39

   19 expr_a: ID . ASS expr_or
   20       | ID . PASS expr_or
   21       | ID . MASS expr_or
   45 factor: ID .

    ASS   shift, and go to state 59
    PASS  shift, and go to state 60
    MASS  shift, and go to state 61

    $default  reduce using rule 45 (factor)


State 40

   49 literal: bool_literal .

    $default  reduce using rule 49 (literal)


State 41

   48 literal: char_literal .

    $default  reduce using rule 48 (literal)


State 42

   47 literal: string_literal .

    $default  reduce using rule 47 (literal)


State 43

   46 literal: int_literal .

    $default  reduce using rule 46 (literal)


State 44

   43 factor: MINUS . factor

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    factor   go to state 63
    literal  go to state 57


State 45

   42 factor: NOT . factor

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    factor   go to state 64
    literal  go to state 57


State 46

   41 factor: OP . expr_a CP

    ID              shift, and go to state 39
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_a    go to state 65
    expr_or   go to state 50
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 47

   13 block: OB stmts CB .

    $default  reduce using rule 13 (block)


State 48

   14 stmts: stmts stmt .

    $default  reduce using rule 14 (stmts)


State 49

   16 stmt: expr_a . SEMCOL

    SEMCOL  shift, and go to state 66


State 50

   18 expr_a: expr_or .
   23 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 67

    $default  reduce using rule 18 (expr_a)


State 51

   22 expr_or: expr_and .
   25 expr_and: expr_and . AND expr_eq

    AND  shift, and go to state 68

    $default  reduce using rule 22 (expr_or)


State 52

   24 expr_and: expr_eq .
   27 expr_eq: expr_eq . EQ expr_rel
   28        | expr_eq . NE expr_rel

    NE  shift, and go to state 69
    EQ  shift, and go to state 70

    $default  reduce using rule 24 (expr_and)


State 53

   26 expr_eq: expr_rel .
   30 expr_rel: expr_rel . LT expr_pm
   31         | expr_rel . GT expr_pm
   32         | expr_rel . LE expr_pm
   33         | expr_rel . GE expr_pm

    LT  shift, and go to state 71
    GT  shift, and go to state 72
    LE  shift, and go to state 73
    GE  shift, and go to state 74

    $default  reduce using rule 26 (expr_eq)


State 54

   29 expr_rel: expr_pm .
   35 expr_pm: expr_pm . PLUS expr_mdm
   36        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 29 (expr_rel)


State 55

   34 expr_pm: expr_mdm .
   38 expr_mdm: expr_mdm . MUL factor
   39         | expr_mdm . DIV factor
   40         | expr_mdm . MOD factor

    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 34 (expr_pm)


State 56

   37 expr_mdm: factor .

    $default  reduce using rule 37 (expr_mdm)


State 57

   44 factor: literal .

    $default  reduce using rule 44 (factor)


State 58

   17 stmt: IF OP . expr_a CP stmt

    ID              shift, and go to state 39
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_a    go to state 80
    expr_or   go to state 50
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 59

   19 expr_a: ID ASS . expr_or

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_or   go to state 81
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 60

   20 expr_a: ID PASS . expr_or

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_or   go to state 82
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 61

   21 expr_a: ID MASS . expr_or

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_or   go to state 83
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 62

   45 factor: ID .

    $default  reduce using rule 45 (factor)


State 63

   43 factor: MINUS factor .

    $default  reduce using rule 43 (factor)


State 64

   42 factor: NOT factor .

    $default  reduce using rule 42 (factor)


State 65

   41 factor: OP expr_a . CP

    CP  shift, and go to state 84


State 66

   16 stmt: expr_a SEMCOL .

    $default  reduce using rule 16 (stmt)


State 67

   23 expr_or: expr_or OR . expr_and

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_and  go to state 85
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 68

   25 expr_and: expr_and AND . expr_eq

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_eq   go to state 86
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 69

   28 expr_eq: expr_eq NE . expr_rel

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_rel  go to state 87
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 70

   27 expr_eq: expr_eq EQ . expr_rel

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_rel  go to state 88
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 71

   30 expr_rel: expr_rel LT . expr_pm

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_pm   go to state 89
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 72

   31 expr_rel: expr_rel GT . expr_pm

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_pm   go to state 90
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 73

   32 expr_rel: expr_rel LE . expr_pm

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_pm   go to state 91
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 74

   33 expr_rel: expr_rel GE . expr_pm

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_pm   go to state 92
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 75

   35 expr_pm: expr_pm PLUS . expr_mdm

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_mdm  go to state 93
    factor    go to state 56
    literal   go to state 57


State 76

   36 expr_pm: expr_pm MINUS . expr_mdm

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    expr_mdm  go to state 94
    factor    go to state 56
    literal   go to state 57


State 77

   38 expr_mdm: expr_mdm MUL . factor

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    factor   go to state 95
    literal  go to state 57


State 78

   39 expr_mdm: expr_mdm DIV . factor

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    factor   go to state 96
    literal  go to state 57


State 79

   40 expr_mdm: expr_mdm MOD . factor

    ID              shift, and go to state 62
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    factor   go to state 97
    literal  go to state 57


State 80

   17 stmt: IF OP expr_a . CP stmt

    CP  shift, and go to state 98


State 81

   19 expr_a: ID ASS expr_or .
   23 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 67

    $default  reduce using rule 19 (expr_a)


State 82

   20 expr_a: ID PASS expr_or .
   23 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 67

    $default  reduce using rule 20 (expr_a)


State 83

   21 expr_a: ID MASS expr_or .
   23 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 67

    $default  reduce using rule 21 (expr_a)


State 84

   41 factor: OP expr_a CP .

    $default  reduce using rule 41 (factor)


State 85

   23 expr_or: expr_or OR expr_and .
   25 expr_and: expr_and . AND expr_eq

    AND  shift, and go to state 68

    $default  reduce using rule 23 (expr_or)


State 86

   25 expr_and: expr_and AND expr_eq .
   27 expr_eq: expr_eq . EQ expr_rel
   28        | expr_eq . NE expr_rel

    NE  shift, and go to state 69
    EQ  shift, and go to state 70

    $default  reduce using rule 25 (expr_and)


State 87

   28 expr_eq: expr_eq NE expr_rel .
   30 expr_rel: expr_rel . LT expr_pm
   31         | expr_rel . GT expr_pm
   32         | expr_rel . LE expr_pm
   33         | expr_rel . GE expr_pm

    LT  shift, and go to state 71
    GT  shift, and go to state 72
    LE  shift, and go to state 73
    GE  shift, and go to state 74

    $default  reduce using rule 28 (expr_eq)


State 88

   27 expr_eq: expr_eq EQ expr_rel .
   30 expr_rel: expr_rel . LT expr_pm
   31         | expr_rel . GT expr_pm
   32         | expr_rel . LE expr_pm
   33         | expr_rel . GE expr_pm

    LT  shift, and go to state 71
    GT  shift, and go to state 72
    LE  shift, and go to state 73
    GE  shift, and go to state 74

    $default  reduce using rule 27 (expr_eq)


State 89

   30 expr_rel: expr_rel LT expr_pm .
   35 expr_pm: expr_pm . PLUS expr_mdm
   36        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 30 (expr_rel)


State 90

   31 expr_rel: expr_rel GT expr_pm .
   35 expr_pm: expr_pm . PLUS expr_mdm
   36        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 31 (expr_rel)


State 91

   32 expr_rel: expr_rel LE expr_pm .
   35 expr_pm: expr_pm . PLUS expr_mdm
   36        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 32 (expr_rel)


State 92

   33 expr_rel: expr_rel GE expr_pm .
   35 expr_pm: expr_pm . PLUS expr_mdm
   36        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 75
    MINUS  shift, and go to state 76

    $default  reduce using rule 33 (expr_rel)


State 93

   35 expr_pm: expr_pm PLUS expr_mdm .
   38 expr_mdm: expr_mdm . MUL factor
   39         | expr_mdm . DIV factor
   40         | expr_mdm . MOD factor

    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 35 (expr_pm)


State 94

   36 expr_pm: expr_pm MINUS expr_mdm .
   38 expr_mdm: expr_mdm . MUL factor
   39         | expr_mdm . DIV factor
   40         | expr_mdm . MOD factor

    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 36 (expr_pm)


State 95

   38 expr_mdm: expr_mdm MUL factor .

    $default  reduce using rule 38 (expr_mdm)


State 96

   39 expr_mdm: expr_mdm DIV factor .

    $default  reduce using rule 39 (expr_mdm)


State 97

   40 expr_mdm: expr_mdm MOD factor .

    $default  reduce using rule 40 (expr_mdm)


State 98

   17 stmt: IF OP expr_a CP . stmt

    IF              shift, and go to state 38
    ID              shift, and go to state 39
    bool_literal    shift, and go to state 40
    char_literal    shift, and go to state 41
    string_literal  shift, and go to state 42
    int_literal     shift, and go to state 43
    MINUS           shift, and go to state 44
    NOT             shift, and go to state 45
    OP              shift, and go to state 46

    stmt      go to state 99
    expr_a    go to state 49
    expr_or   go to state 50
    expr_and  go to state 51
    expr_eq   go to state 52
    expr_rel  go to state 53
    expr_pm   go to state 54
    expr_mdm  go to state 55
    factor    go to state 56
    literal   go to state 57


State 99

   17 stmt: IF OP expr_a CP stmt .

    $default  reduce using rule 17 (stmt)

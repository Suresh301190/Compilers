Terminals unused in grammar

   FOR
   bool_literal
   OS
   CS
   UMINUS


Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM block

    2 block: OB stmts CB

    3 stmts: stmts stmt
    4      | %empty

    5 stmt: expr_a ';'
    6     | IF OP expr_a CP stmt
    7     | block

    8 expr_a: expr_c
    9       | ID ASSIGN_OP expr_c

   10 expr_c: expr_r
   11       | expr_c COND_OP expr_r

   12 expr_r: expr_pm
   13       | expr_r REL_OP expr_pm
   14       | expr_r EQ_OP expr_pm

   15 expr_pm: expr_mdm
   16        | expr_pm PLUS expr_mdm
   17        | expr_pm MINUS expr_mdm

   18 expr_mdm: factor
   19         | expr_mdm MUL factor
   20         | expr_mdm DIV factor
   21         | expr_mdm MOD factor

   22 factor: OP expr_a CP
   23       | int_literal
   24       | string_literal
   25       | char_literal
   26       | ID


Terminals, with rules where they appear

$end (0) 0
';' (59) 5
error (256)
CLASS (258) 1
PROGRAM (259) 1
IF (260) 6
FOR (261)
ID (262) 9 26
bool_literal (263)
char_literal (264) 25
string_literal (265) 24
int_literal (266) 23
PLUS (267) 16
MINUS (268) 17
MUL (269) 19
DIV (270) 20
MOD (271) 21
REL_OP (272) 13
EQ_OP (273) 14
ASSIGN_OP (274) 9
COND_OP (275) 11
OP (276) 6 22
CP (277) 6 22
OB (278) 2
CB (279) 2
OS (280)
CS (281)
UMINUS (282)


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
program (30)
    on left: 1, on right: 0
block (31)
    on left: 2, on right: 1 7
stmts (32)
    on left: 3 4, on right: 2 3
stmt (33)
    on left: 5 6 7, on right: 3 6
expr_a (34)
    on left: 8 9, on right: 5 6 22
expr_c (35)
    on left: 10 11, on right: 8 9 11
expr_r (36)
    on left: 12 13 14, on right: 10 11 13 14
expr_pm (37)
    on left: 15 16 17, on right: 12 13 14 16 17
expr_mdm (38)
    on left: 18 19 20 21, on right: 15 16 17 19 20 21
factor (39)
    on left: 22 23 24 25 26, on right: 18 19 20 21


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM block

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . block

    OB  shift, and go to state 5

    block  go to state 6


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 block: OB . stmts CB

    $default  reduce using rule 4 (stmts)

    stmts  go to state 7


State 6

    1 program: CLASS PROGRAM block .

    $default  reduce using rule 1 (program)


State 7

    2 block: OB stmts . CB
    3 stmts: stmts . stmt

    IF              shift, and go to state 8
    ID              shift, and go to state 9
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13
    OB              shift, and go to state 5
    CB              shift, and go to state 14

    block     go to state 15
    stmt      go to state 16
    expr_a    go to state 17
    expr_c    go to state 18
    expr_r    go to state 19
    expr_pm   go to state 20
    expr_mdm  go to state 21
    factor    go to state 22


State 8

    6 stmt: IF . OP expr_a CP stmt

    OP  shift, and go to state 23


State 9

    9 expr_a: ID . ASSIGN_OP expr_c
   26 factor: ID .

    ASSIGN_OP  shift, and go to state 24

    $default  reduce using rule 26 (factor)


State 10

   25 factor: char_literal .

    $default  reduce using rule 25 (factor)


State 11

   24 factor: string_literal .

    $default  reduce using rule 24 (factor)


State 12

   23 factor: int_literal .

    $default  reduce using rule 23 (factor)


State 13

   22 factor: OP . expr_a CP

    ID              shift, and go to state 9
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_a    go to state 25
    expr_c    go to state 18
    expr_r    go to state 19
    expr_pm   go to state 20
    expr_mdm  go to state 21
    factor    go to state 22


State 14

    2 block: OB stmts CB .

    $default  reduce using rule 2 (block)


State 15

    7 stmt: block .

    $default  reduce using rule 7 (stmt)


State 16

    3 stmts: stmts stmt .

    $default  reduce using rule 3 (stmts)


State 17

    5 stmt: expr_a . ';'

    ';'  shift, and go to state 26


State 18

    8 expr_a: expr_c .
   11 expr_c: expr_c . COND_OP expr_r

    COND_OP  shift, and go to state 27

    $default  reduce using rule 8 (expr_a)


State 19

   10 expr_c: expr_r .
   13 expr_r: expr_r . REL_OP expr_pm
   14       | expr_r . EQ_OP expr_pm

    REL_OP  shift, and go to state 28
    EQ_OP   shift, and go to state 29

    $default  reduce using rule 10 (expr_c)


State 20

   12 expr_r: expr_pm .
   16 expr_pm: expr_pm . PLUS expr_mdm
   17        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 30
    MINUS  shift, and go to state 31

    $default  reduce using rule 12 (expr_r)


State 21

   15 expr_pm: expr_mdm .
   19 expr_mdm: expr_mdm . MUL factor
   20         | expr_mdm . DIV factor
   21         | expr_mdm . MOD factor

    MUL  shift, and go to state 32
    DIV  shift, and go to state 33
    MOD  shift, and go to state 34

    $default  reduce using rule 15 (expr_pm)


State 22

   18 expr_mdm: factor .

    $default  reduce using rule 18 (expr_mdm)


State 23

    6 stmt: IF OP . expr_a CP stmt

    ID              shift, and go to state 9
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_a    go to state 35
    expr_c    go to state 18
    expr_r    go to state 19
    expr_pm   go to state 20
    expr_mdm  go to state 21
    factor    go to state 22


State 24

    9 expr_a: ID ASSIGN_OP . expr_c

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_c    go to state 37
    expr_r    go to state 19
    expr_pm   go to state 20
    expr_mdm  go to state 21
    factor    go to state 22


State 25

   22 factor: OP expr_a . CP

    CP  shift, and go to state 38


State 26

    5 stmt: expr_a ';' .

    $default  reduce using rule 5 (stmt)


State 27

   11 expr_c: expr_c COND_OP . expr_r

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_r    go to state 39
    expr_pm   go to state 20
    expr_mdm  go to state 21
    factor    go to state 22


State 28

   13 expr_r: expr_r REL_OP . expr_pm

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_pm   go to state 40
    expr_mdm  go to state 21
    factor    go to state 22


State 29

   14 expr_r: expr_r EQ_OP . expr_pm

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_pm   go to state 41
    expr_mdm  go to state 21
    factor    go to state 22


State 30

   16 expr_pm: expr_pm PLUS . expr_mdm

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_mdm  go to state 42
    factor    go to state 22


State 31

   17 expr_pm: expr_pm MINUS . expr_mdm

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    expr_mdm  go to state 43
    factor    go to state 22


State 32

   19 expr_mdm: expr_mdm MUL . factor

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    factor  go to state 44


State 33

   20 expr_mdm: expr_mdm DIV . factor

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    factor  go to state 45


State 34

   21 expr_mdm: expr_mdm MOD . factor

    ID              shift, and go to state 36
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13

    factor  go to state 46


State 35

    6 stmt: IF OP expr_a . CP stmt

    CP  shift, and go to state 47


State 36

   26 factor: ID .

    $default  reduce using rule 26 (factor)


State 37

    9 expr_a: ID ASSIGN_OP expr_c .
   11 expr_c: expr_c . COND_OP expr_r

    COND_OP  shift, and go to state 27

    $default  reduce using rule 9 (expr_a)


State 38

   22 factor: OP expr_a CP .

    $default  reduce using rule 22 (factor)


State 39

   11 expr_c: expr_c COND_OP expr_r .
   13 expr_r: expr_r . REL_OP expr_pm
   14       | expr_r . EQ_OP expr_pm

    REL_OP  shift, and go to state 28
    EQ_OP   shift, and go to state 29

    $default  reduce using rule 11 (expr_c)


State 40

   13 expr_r: expr_r REL_OP expr_pm .
   16 expr_pm: expr_pm . PLUS expr_mdm
   17        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 30
    MINUS  shift, and go to state 31

    $default  reduce using rule 13 (expr_r)


State 41

   14 expr_r: expr_r EQ_OP expr_pm .
   16 expr_pm: expr_pm . PLUS expr_mdm
   17        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 30
    MINUS  shift, and go to state 31

    $default  reduce using rule 14 (expr_r)


State 42

   16 expr_pm: expr_pm PLUS expr_mdm .
   19 expr_mdm: expr_mdm . MUL factor
   20         | expr_mdm . DIV factor
   21         | expr_mdm . MOD factor

    MUL  shift, and go to state 32
    DIV  shift, and go to state 33
    MOD  shift, and go to state 34

    $default  reduce using rule 16 (expr_pm)


State 43

   17 expr_pm: expr_pm MINUS expr_mdm .
   19 expr_mdm: expr_mdm . MUL factor
   20         | expr_mdm . DIV factor
   21         | expr_mdm . MOD factor

    MUL  shift, and go to state 32
    DIV  shift, and go to state 33
    MOD  shift, and go to state 34

    $default  reduce using rule 17 (expr_pm)


State 44

   19 expr_mdm: expr_mdm MUL factor .

    $default  reduce using rule 19 (expr_mdm)


State 45

   20 expr_mdm: expr_mdm DIV factor .

    $default  reduce using rule 20 (expr_mdm)


State 46

   21 expr_mdm: expr_mdm MOD factor .

    $default  reduce using rule 21 (expr_mdm)


State 47

    6 stmt: IF OP expr_a CP . stmt

    IF              shift, and go to state 8
    ID              shift, and go to state 9
    char_literal    shift, and go to state 10
    string_literal  shift, and go to state 11
    int_literal     shift, and go to state 12
    OP              shift, and go to state 13
    OB              shift, and go to state 5

    block     go to state 15
    stmt      go to state 48
    expr_a    go to state 17
    expr_c    go to state 18
    expr_r    go to state 19
    expr_pm   go to state 20
    expr_mdm  go to state 21
    factor    go to state 22


State 48

    6 stmt: IF OP expr_a CP stmt .

    $default  reduce using rule 6 (stmt)

Terminals unused in grammar

   FOR
   CALLOUT
   BREAK
   CONTINUE
   ELSE
   OS
   CS


Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OB method_decls CB

    2 method_decls: method_decls method_decl
    3             | %empty

    4 method_decl: VOID ID OP args CP block
    5            | INT ID OP args CP block
    6            | BOOL ID OP args CP block

    7 args: arg args1
    8     | %empty

    9 args1: COMMA arg args1
   10      | %empty

   11 arg: BOOL ID
   12    | INT ID

   13 block: OB var_decls stmts CB

   14 var_decls: var_decls var_decl
   15          | %empty

   16 var_decl: arg vars SEMCOL

   17 vars: COMMA var vars
   18     | %empty

   19 var: ID

   20 stmts: stmts stmt
   21      | %empty

   22 stmt: expr_a SEMCOL
   23     | IF OP expr_a CP stmt

   24 expr_a: expr_or
   25       | ID ASS expr_or
   26       | ID PASS expr_or
   27       | ID MASS expr_or

   28 expr_or: expr_and
   29        | expr_or OR expr_and

   30 expr_and: expr_eq
   31         | expr_and AND expr_eq

   32 expr_eq: expr_rel
   33        | expr_eq EQ expr_rel
   34        | expr_eq NE expr_rel

   35 expr_rel: expr_pm
   36         | expr_rel LT expr_pm
   37         | expr_rel GT expr_pm
   38         | expr_rel LE expr_pm
   39         | expr_rel GE expr_pm

   40 expr_pm: expr_mdm
   41        | expr_pm PLUS expr_mdm
   42        | expr_pm MINUS expr_mdm

   43 expr_mdm: factor
   44         | expr_mdm MUL factor
   45         | expr_mdm DIV factor
   46         | expr_mdm MOD factor

   47 factor: OP expr_a CP
   48       | NOT factor
   49       | MINUS factor
   50       | literal
   51       | ID

   52 literal: int_literal
   53        | string_literal
   54        | char_literal
   55        | bool_literal


Terminals, with rules where they appear

$end (0) 0
error (256)
CLASS (258) 1
PROGRAM (259) 1
IF (260) 23
FOR (261)
ID (262) 4 5 6 11 12 19 25 26 27 51
VOID (263) 4
INT (264) 5 12
BOOL (265) 6 11
CALLOUT (266)
BREAK (267)
CONTINUE (268)
ELSE (269)
bool_literal (270) 55
char_literal (271) 54
string_literal (272) 53
int_literal (273) 52
COMMA (274) 9 17
SEMCOL (275) 16 22
PLUS (276) 41
MINUS (277) 42 49
MUL (278) 44
DIV (279) 45
MOD (280) 46
LT (281) 36
GT (282) 37
LE (283) 38
GE (284) 39
NE (285) 34
EQ (286) 33
ASS (287) 25
PASS (288) 26
MASS (289) 27
AND (290) 31
OR (291) 29
NOT (292) 48
OP (293) 4 5 6 23 47
CP (294) 4 5 6 23 47
OB (295) 1 13
CB (296) 1 13
OS (297)
CS (298)
UMINUS (299)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
method_decls (47)
    on left: 2 3, on right: 1 2
method_decl (48)
    on left: 4 5 6, on right: 2
args (49)
    on left: 7 8, on right: 4 5 6
args1 (50)
    on left: 9 10, on right: 7 9
arg (51)
    on left: 11 12, on right: 7 9 16
block (52)
    on left: 13, on right: 4 5 6
var_decls (53)
    on left: 14 15, on right: 13 14
var_decl (54)
    on left: 16, on right: 14
vars (55)
    on left: 17 18, on right: 16 17
var (56)
    on left: 19, on right: 17
stmts (57)
    on left: 20 21, on right: 13 20
stmt (58)
    on left: 22 23, on right: 20 23
expr_a (59)
    on left: 24 25 26 27, on right: 22 23 47
expr_or (60)
    on left: 28 29, on right: 24 25 26 27 29
expr_and (61)
    on left: 30 31, on right: 28 29 31
expr_eq (62)
    on left: 32 33 34, on right: 30 31 33 34
expr_rel (63)
    on left: 35 36 37 38 39, on right: 32 33 34 36 37 38 39
expr_pm (64)
    on left: 40 41 42, on right: 35 36 37 38 39 41 42
expr_mdm (65)
    on left: 43 44 45 46, on right: 40 41 42 44 45 46
factor (66)
    on left: 47 48 49 50 51, on right: 43 44 45 46 48 49
literal (67)
    on left: 52 53 54 55, on right: 50


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OB method_decls CB

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OB method_decls CB

    OB  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OB . method_decls CB

    $default  reduce using rule 3 (method_decls)

    method_decls  go to state 6


State 6

    1 program: CLASS PROGRAM OB method_decls . CB
    2 method_decls: method_decls . method_decl

    VOID  shift, and go to state 7
    INT   shift, and go to state 8
    BOOL  shift, and go to state 9
    CB    shift, and go to state 10

    method_decl  go to state 11


State 7

    4 method_decl: VOID . ID OP args CP block

    ID  shift, and go to state 12


State 8

    5 method_decl: INT . ID OP args CP block

    ID  shift, and go to state 13


State 9

    6 method_decl: BOOL . ID OP args CP block

    ID  shift, and go to state 14


State 10

    1 program: CLASS PROGRAM OB method_decls CB .

    $default  reduce using rule 1 (program)


State 11

    2 method_decls: method_decls method_decl .

    $default  reduce using rule 2 (method_decls)


State 12

    4 method_decl: VOID ID . OP args CP block

    OP  shift, and go to state 15


State 13

    5 method_decl: INT ID . OP args CP block

    OP  shift, and go to state 16


State 14

    6 method_decl: BOOL ID . OP args CP block

    OP  shift, and go to state 17


State 15

    4 method_decl: VOID ID OP . args CP block

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args  go to state 20
    arg   go to state 21


State 16

    5 method_decl: INT ID OP . args CP block

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args  go to state 22
    arg   go to state 21


State 17

    6 method_decl: BOOL ID OP . args CP block

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 8 (args)

    args  go to state 23
    arg   go to state 21


State 18

   12 arg: INT . ID

    ID  shift, and go to state 24


State 19

   11 arg: BOOL . ID

    ID  shift, and go to state 25


State 20

    4 method_decl: VOID ID OP args . CP block

    CP  shift, and go to state 26


State 21

    7 args: arg . args1

    COMMA  shift, and go to state 27

    $default  reduce using rule 10 (args1)

    args1  go to state 28


State 22

    5 method_decl: INT ID OP args . CP block

    CP  shift, and go to state 29


State 23

    6 method_decl: BOOL ID OP args . CP block

    CP  shift, and go to state 30


State 24

   12 arg: INT ID .

    $default  reduce using rule 12 (arg)


State 25

   11 arg: BOOL ID .

    $default  reduce using rule 11 (arg)


State 26

    4 method_decl: VOID ID OP args CP . block

    OB  shift, and go to state 31

    block  go to state 32


State 27

    9 args1: COMMA . arg args1

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    arg  go to state 33


State 28

    7 args: arg args1 .

    $default  reduce using rule 7 (args)


State 29

    5 method_decl: INT ID OP args CP . block

    OB  shift, and go to state 31

    block  go to state 34


State 30

    6 method_decl: BOOL ID OP args CP . block

    OB  shift, and go to state 31

    block  go to state 35


State 31

   13 block: OB . var_decls stmts CB

    $default  reduce using rule 15 (var_decls)

    var_decls  go to state 36


State 32

    4 method_decl: VOID ID OP args CP block .

    $default  reduce using rule 4 (method_decl)


State 33

    9 args1: COMMA arg . args1

    COMMA  shift, and go to state 27

    $default  reduce using rule 10 (args1)

    args1  go to state 37


State 34

    5 method_decl: INT ID OP args CP block .

    $default  reduce using rule 5 (method_decl)


State 35

    6 method_decl: BOOL ID OP args CP block .

    $default  reduce using rule 6 (method_decl)


State 36

   13 block: OB var_decls . stmts CB
   14 var_decls: var_decls . var_decl

    INT   shift, and go to state 18
    BOOL  shift, and go to state 19

    $default  reduce using rule 21 (stmts)

    arg       go to state 38
    var_decl  go to state 39
    stmts     go to state 40


State 37

    9 args1: COMMA arg args1 .

    $default  reduce using rule 9 (args1)


State 38

   16 var_decl: arg . vars SEMCOL

    COMMA  shift, and go to state 41

    $default  reduce using rule 18 (vars)

    vars  go to state 42


State 39

   14 var_decls: var_decls var_decl .

    $default  reduce using rule 14 (var_decls)


State 40

   13 block: OB var_decls stmts . CB
   20 stmts: stmts . stmt

    IF              shift, and go to state 43
    ID              shift, and go to state 44
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51
    CB              shift, and go to state 52

    stmt      go to state 53
    expr_a    go to state 54
    expr_or   go to state 55
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 41

   17 vars: COMMA . var vars

    ID  shift, and go to state 63

    var  go to state 64


State 42

   16 var_decl: arg vars . SEMCOL

    SEMCOL  shift, and go to state 65


State 43

   23 stmt: IF . OP expr_a CP stmt

    OP  shift, and go to state 66


State 44

   25 expr_a: ID . ASS expr_or
   26       | ID . PASS expr_or
   27       | ID . MASS expr_or
   51 factor: ID .

    ASS   shift, and go to state 67
    PASS  shift, and go to state 68
    MASS  shift, and go to state 69

    $default  reduce using rule 51 (factor)


State 45

   55 literal: bool_literal .

    $default  reduce using rule 55 (literal)


State 46

   54 literal: char_literal .

    $default  reduce using rule 54 (literal)


State 47

   53 literal: string_literal .

    $default  reduce using rule 53 (literal)


State 48

   52 literal: int_literal .

    $default  reduce using rule 52 (literal)


State 49

   49 factor: MINUS . factor

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    factor   go to state 71
    literal  go to state 62


State 50

   48 factor: NOT . factor

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    factor   go to state 72
    literal  go to state 62


State 51

   47 factor: OP . expr_a CP

    ID              shift, and go to state 44
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_a    go to state 73
    expr_or   go to state 55
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 52

   13 block: OB var_decls stmts CB .

    $default  reduce using rule 13 (block)


State 53

   20 stmts: stmts stmt .

    $default  reduce using rule 20 (stmts)


State 54

   22 stmt: expr_a . SEMCOL

    SEMCOL  shift, and go to state 74


State 55

   24 expr_a: expr_or .
   29 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 75

    $default  reduce using rule 24 (expr_a)


State 56

   28 expr_or: expr_and .
   31 expr_and: expr_and . AND expr_eq

    AND  shift, and go to state 76

    $default  reduce using rule 28 (expr_or)


State 57

   30 expr_and: expr_eq .
   33 expr_eq: expr_eq . EQ expr_rel
   34        | expr_eq . NE expr_rel

    NE  shift, and go to state 77
    EQ  shift, and go to state 78

    $default  reduce using rule 30 (expr_and)


State 58

   32 expr_eq: expr_rel .
   36 expr_rel: expr_rel . LT expr_pm
   37         | expr_rel . GT expr_pm
   38         | expr_rel . LE expr_pm
   39         | expr_rel . GE expr_pm

    LT  shift, and go to state 79
    GT  shift, and go to state 80
    LE  shift, and go to state 81
    GE  shift, and go to state 82

    $default  reduce using rule 32 (expr_eq)


State 59

   35 expr_rel: expr_pm .
   41 expr_pm: expr_pm . PLUS expr_mdm
   42        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 83
    MINUS  shift, and go to state 84

    $default  reduce using rule 35 (expr_rel)


State 60

   40 expr_pm: expr_mdm .
   44 expr_mdm: expr_mdm . MUL factor
   45         | expr_mdm . DIV factor
   46         | expr_mdm . MOD factor

    MUL  shift, and go to state 85
    DIV  shift, and go to state 86
    MOD  shift, and go to state 87

    $default  reduce using rule 40 (expr_pm)


State 61

   43 expr_mdm: factor .

    $default  reduce using rule 43 (expr_mdm)


State 62

   50 factor: literal .

    $default  reduce using rule 50 (factor)


State 63

   19 var: ID .

    $default  reduce using rule 19 (var)


State 64

   17 vars: COMMA var . vars

    COMMA  shift, and go to state 41

    $default  reduce using rule 18 (vars)

    vars  go to state 88


State 65

   16 var_decl: arg vars SEMCOL .

    $default  reduce using rule 16 (var_decl)


State 66

   23 stmt: IF OP . expr_a CP stmt

    ID              shift, and go to state 44
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_a    go to state 89
    expr_or   go to state 55
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 67

   25 expr_a: ID ASS . expr_or

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_or   go to state 90
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 68

   26 expr_a: ID PASS . expr_or

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_or   go to state 91
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 69

   27 expr_a: ID MASS . expr_or

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_or   go to state 92
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 70

   51 factor: ID .

    $default  reduce using rule 51 (factor)


State 71

   49 factor: MINUS factor .

    $default  reduce using rule 49 (factor)


State 72

   48 factor: NOT factor .

    $default  reduce using rule 48 (factor)


State 73

   47 factor: OP expr_a . CP

    CP  shift, and go to state 93


State 74

   22 stmt: expr_a SEMCOL .

    $default  reduce using rule 22 (stmt)


State 75

   29 expr_or: expr_or OR . expr_and

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_and  go to state 94
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 76

   31 expr_and: expr_and AND . expr_eq

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_eq   go to state 95
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 77

   34 expr_eq: expr_eq NE . expr_rel

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_rel  go to state 96
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 78

   33 expr_eq: expr_eq EQ . expr_rel

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_rel  go to state 97
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 79

   36 expr_rel: expr_rel LT . expr_pm

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_pm   go to state 98
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 80

   37 expr_rel: expr_rel GT . expr_pm

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_pm   go to state 99
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 81

   38 expr_rel: expr_rel LE . expr_pm

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_pm   go to state 100
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 82

   39 expr_rel: expr_rel GE . expr_pm

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_pm   go to state 101
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 83

   41 expr_pm: expr_pm PLUS . expr_mdm

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_mdm  go to state 102
    factor    go to state 61
    literal   go to state 62


State 84

   42 expr_pm: expr_pm MINUS . expr_mdm

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    expr_mdm  go to state 103
    factor    go to state 61
    literal   go to state 62


State 85

   44 expr_mdm: expr_mdm MUL . factor

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    factor   go to state 104
    literal  go to state 62


State 86

   45 expr_mdm: expr_mdm DIV . factor

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    factor   go to state 105
    literal  go to state 62


State 87

   46 expr_mdm: expr_mdm MOD . factor

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    factor   go to state 106
    literal  go to state 62


State 88

   17 vars: COMMA var vars .

    $default  reduce using rule 17 (vars)


State 89

   23 stmt: IF OP expr_a . CP stmt

    CP  shift, and go to state 107


State 90

   25 expr_a: ID ASS expr_or .
   29 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 75

    $default  reduce using rule 25 (expr_a)


State 91

   26 expr_a: ID PASS expr_or .
   29 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 75

    $default  reduce using rule 26 (expr_a)


State 92

   27 expr_a: ID MASS expr_or .
   29 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 75

    $default  reduce using rule 27 (expr_a)


State 93

   47 factor: OP expr_a CP .

    $default  reduce using rule 47 (factor)


State 94

   29 expr_or: expr_or OR expr_and .
   31 expr_and: expr_and . AND expr_eq

    AND  shift, and go to state 76

    $default  reduce using rule 29 (expr_or)


State 95

   31 expr_and: expr_and AND expr_eq .
   33 expr_eq: expr_eq . EQ expr_rel
   34        | expr_eq . NE expr_rel

    NE  shift, and go to state 77
    EQ  shift, and go to state 78

    $default  reduce using rule 31 (expr_and)


State 96

   34 expr_eq: expr_eq NE expr_rel .
   36 expr_rel: expr_rel . LT expr_pm
   37         | expr_rel . GT expr_pm
   38         | expr_rel . LE expr_pm
   39         | expr_rel . GE expr_pm

    LT  shift, and go to state 79
    GT  shift, and go to state 80
    LE  shift, and go to state 81
    GE  shift, and go to state 82

    $default  reduce using rule 34 (expr_eq)


State 97

   33 expr_eq: expr_eq EQ expr_rel .
   36 expr_rel: expr_rel . LT expr_pm
   37         | expr_rel . GT expr_pm
   38         | expr_rel . LE expr_pm
   39         | expr_rel . GE expr_pm

    LT  shift, and go to state 79
    GT  shift, and go to state 80
    LE  shift, and go to state 81
    GE  shift, and go to state 82

    $default  reduce using rule 33 (expr_eq)


State 98

   36 expr_rel: expr_rel LT expr_pm .
   41 expr_pm: expr_pm . PLUS expr_mdm
   42        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 83
    MINUS  shift, and go to state 84

    $default  reduce using rule 36 (expr_rel)


State 99

   37 expr_rel: expr_rel GT expr_pm .
   41 expr_pm: expr_pm . PLUS expr_mdm
   42        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 83
    MINUS  shift, and go to state 84

    $default  reduce using rule 37 (expr_rel)


State 100

   38 expr_rel: expr_rel LE expr_pm .
   41 expr_pm: expr_pm . PLUS expr_mdm
   42        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 83
    MINUS  shift, and go to state 84

    $default  reduce using rule 38 (expr_rel)


State 101

   39 expr_rel: expr_rel GE expr_pm .
   41 expr_pm: expr_pm . PLUS expr_mdm
   42        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 83
    MINUS  shift, and go to state 84

    $default  reduce using rule 39 (expr_rel)


State 102

   41 expr_pm: expr_pm PLUS expr_mdm .
   44 expr_mdm: expr_mdm . MUL factor
   45         | expr_mdm . DIV factor
   46         | expr_mdm . MOD factor

    MUL  shift, and go to state 85
    DIV  shift, and go to state 86
    MOD  shift, and go to state 87

    $default  reduce using rule 41 (expr_pm)


State 103

   42 expr_pm: expr_pm MINUS expr_mdm .
   44 expr_mdm: expr_mdm . MUL factor
   45         | expr_mdm . DIV factor
   46         | expr_mdm . MOD factor

    MUL  shift, and go to state 85
    DIV  shift, and go to state 86
    MOD  shift, and go to state 87

    $default  reduce using rule 42 (expr_pm)


State 104

   44 expr_mdm: expr_mdm MUL factor .

    $default  reduce using rule 44 (expr_mdm)


State 105

   45 expr_mdm: expr_mdm DIV factor .

    $default  reduce using rule 45 (expr_mdm)


State 106

   46 expr_mdm: expr_mdm MOD factor .

    $default  reduce using rule 46 (expr_mdm)


State 107

   23 stmt: IF OP expr_a CP . stmt

    IF              shift, and go to state 43
    ID              shift, and go to state 44
    bool_literal    shift, and go to state 45
    char_literal    shift, and go to state 46
    string_literal  shift, and go to state 47
    int_literal     shift, and go to state 48
    MINUS           shift, and go to state 49
    NOT             shift, and go to state 50
    OP              shift, and go to state 51

    stmt      go to state 108
    expr_a    go to state 54
    expr_or   go to state 55
    expr_and  go to state 56
    expr_eq   go to state 57
    expr_rel  go to state 58
    expr_pm   go to state 59
    expr_mdm  go to state 60
    factor    go to state 61
    literal   go to state 62


State 108

   23 stmt: IF OP expr_a CP stmt .

    $default  reduce using rule 23 (stmt)

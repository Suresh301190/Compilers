Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OB feild_methods CB

    2 feild_methods: feild_methods feild_method
    3              | %empty

    4 feild_method: type ID OP args CP block
    5             | VOID ID OP args CP block
    6             | type ID OS int_literal CS ARR_IDS SEMCOL
    7             | type ID ARR_IDS SEMCOL
    8             | type ID ASS literal SEMCOL

    9 type: INT
   10     | BOOL

   11 ARR_IDS: COMMA ARR_ID ARR_IDS
   12        | %empty

   13 ARR_ID: ID
   14       | ID OS int_literal CS

   15 args: arg args1
   16     | %empty

   17 args1: COMMA arg args1
   18      | %empty

   19 arg: BOOL ID
   20    | INT ID

   21 $@1: %empty

   22 block: OB $@1 var_decls stmts CB

   23 var_decls: var_decls var_decl
   24          | %empty

   25 var_decl: arg vars SEMCOL

   26 vars: COMMA var vars
   27     | %empty

   28 var: ID

   29 stmts: stmts M stmt
   30      | %empty

   31 stmt: block
   32     | expr_a SEMCOL
   33     | IF OP expr_a CP M block
   34     | IF OP expr_a CP M block ELSE M block
   35     | FOR fexpr COMMA expr_a block
   36     | RETURN Rexpr SEMCOL
   37     | BREAK SEMCOL
   38     | CONTINUE SEMCOL
   39     | method_call SEMCOL

   40 method_call: CALLOUT OP string_literal CP

   41 Rexpr: OP expr_a CP
   42      | %empty

   43 fexpr: ID ASS expr_a

   44 expr_a: expr_or
   45       | location ASS expr_or
   46       | location PASS expr_or
   47       | location MASS expr_or
   48       | ID OP expr_rec CP

   49 location: ID
   50         | ID OS expr_a CS

   51 expr_rec: expr_a expr_rec2
   52         | %empty

   53 expr_rec2: COMMA expr_a expr_rec2
   54          | %empty

   55 expr_or: expr_and
   56        | expr_or OR expr_and

   57 expr_and: expr_eq
   58         | expr_and AND expr_eq

   59 expr_eq: expr_rel
   60        | expr_eq EQ expr_rel
   61        | expr_eq NE expr_rel

   62 expr_rel: expr_pm
   63         | expr_rel LT expr_pm
   64         | expr_rel GT expr_pm
   65         | expr_rel LE expr_pm
   66         | expr_rel GE expr_pm

   67 expr_pm: expr_mdm
   68        | expr_pm PLUS expr_mdm
   69        | expr_pm MINUS expr_mdm

   70 expr_mdm: factor
   71         | expr_mdm MUL factor
   72         | expr_mdm DIV factor
   73         | expr_mdm MOD factor

   74 factor: OP expr_a CP
   75       | NOT factor
   76       | MINUS factor
   77       | literal
   78       | ID OS expr_a CS
   79       | ID

   80 literal: int_literal
   81        | string_literal
   82        | char_literal
   83        | bool_literal

   84 M: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
CLASS (258) 1
PROGRAM (259) 1
IF (260) 33 34
FOR (261) 35
ID (262) 4 5 6 7 8 13 14 19 20 28 43 48 49 50 78 79
VOID (263) 5
INT (264) 9 20
BOOL (265) 10 19
CALLOUT (266) 40
BREAK (267) 37
CONTINUE (268) 38
ELSE (269) 34
RETURN (270) 36
bool_literal (271) 83
char_literal (272) 82
string_literal (273) 40 81
int_literal (274) 6 14 80
COMMA (275) 11 17 26 35 53
SEMCOL (276) 6 7 8 25 32 36 37 38 39
PLUS (277) 68
MINUS (278) 69 76
MUL (279) 71
DIV (280) 72
MOD (281) 73
LT (282) 63
GT (283) 64
LE (284) 65
GE (285) 66
NE (286) 61
EQ (287) 60
ASS (288) 8 43 45
PASS (289) 46
MASS (290) 47
AND (291) 58
OR (292) 56
NOT (293) 75
OP (294) 4 5 33 34 40 41 48 74
CP (295) 4 5 33 34 40 41 48 74
OB (296) 1 22
CB (297) 1 22
OS (298) 6 14 50 78
CS (299) 6 14 50 78
UMINUS (300)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
feild_methods (48)
    on left: 2 3, on right: 1 2
feild_method (49)
    on left: 4 5 6 7 8, on right: 2
type (50)
    on left: 9 10, on right: 4 6 7 8
ARR_IDS (51)
    on left: 11 12, on right: 6 7 11
ARR_ID (52)
    on left: 13 14, on right: 11
args (53)
    on left: 15 16, on right: 4 5
args1 (54)
    on left: 17 18, on right: 15 17
arg (55)
    on left: 19 20, on right: 15 17 25
block (56)
    on left: 22, on right: 4 5 31 33 34 35
$@1 (57)
    on left: 21, on right: 22
var_decls (58)
    on left: 23 24, on right: 22 23
var_decl (59)
    on left: 25, on right: 23
vars (60)
    on left: 26 27, on right: 25 26
var (61)
    on left: 28, on right: 26
stmts (62)
    on left: 29 30, on right: 22 29
stmt (63)
    on left: 31 32 33 34 35 36 37 38 39, on right: 29
method_call (64)
    on left: 40, on right: 39
Rexpr (65)
    on left: 41 42, on right: 36
fexpr (66)
    on left: 43, on right: 35
expr_a (67)
    on left: 44 45 46 47 48, on right: 32 33 34 35 41 43 50 51 53 74
    78
location (68)
    on left: 49 50, on right: 45 46 47
expr_rec (69)
    on left: 51 52, on right: 48
expr_rec2 (70)
    on left: 53 54, on right: 51 53
expr_or (71)
    on left: 55 56, on right: 44 45 46 47 56
expr_and (72)
    on left: 57 58, on right: 55 56 58
expr_eq (73)
    on left: 59 60 61, on right: 57 58 60 61
expr_rel (74)
    on left: 62 63 64 65 66, on right: 59 60 61 63 64 65 66
expr_pm (75)
    on left: 67 68 69, on right: 62 63 64 65 66 68 69
expr_mdm (76)
    on left: 70 71 72 73, on right: 67 68 69 71 72 73
factor (77)
    on left: 74 75 76 77 78 79, on right: 70 71 72 73 75 76
literal (78)
    on left: 80 81 82 83, on right: 8 77
M (79)
    on left: 84, on right: 29 33 34


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OB feild_methods CB

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OB feild_methods CB

    OB  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OB . feild_methods CB

    $default  reduce using rule 3 (feild_methods)

    feild_methods  go to state 6


State 6

    1 program: CLASS PROGRAM OB feild_methods . CB
    2 feild_methods: feild_methods . feild_method

    VOID  shift, and go to state 7
    INT   shift, and go to state 8
    BOOL  shift, and go to state 9
    CB    shift, and go to state 10

    feild_method  go to state 11
    type          go to state 12


State 7

    5 feild_method: VOID . ID OP args CP block

    ID  shift, and go to state 13


State 8

    9 type: INT .

    $default  reduce using rule 9 (type)


State 9

   10 type: BOOL .

    $default  reduce using rule 10 (type)


State 10

    1 program: CLASS PROGRAM OB feild_methods CB .

    $default  reduce using rule 1 (program)


State 11

    2 feild_methods: feild_methods feild_method .

    $default  reduce using rule 2 (feild_methods)


State 12

    4 feild_method: type . ID OP args CP block
    6             | type . ID OS int_literal CS ARR_IDS SEMCOL
    7             | type . ID ARR_IDS SEMCOL
    8             | type . ID ASS literal SEMCOL

    ID  shift, and go to state 14


State 13

    5 feild_method: VOID ID . OP args CP block

    OP  shift, and go to state 15


State 14

    4 feild_method: type ID . OP args CP block
    6             | type ID . OS int_literal CS ARR_IDS SEMCOL
    7             | type ID . ARR_IDS SEMCOL
    8             | type ID . ASS literal SEMCOL

    COMMA  shift, and go to state 16
    ASS    shift, and go to state 17
    OP     shift, and go to state 18
    OS     shift, and go to state 19

    $default  reduce using rule 12 (ARR_IDS)

    ARR_IDS  go to state 20


State 15

    5 feild_method: VOID ID OP . args CP block

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    $default  reduce using rule 16 (args)

    args  go to state 23
    arg   go to state 24


State 16

   11 ARR_IDS: COMMA . ARR_ID ARR_IDS

    ID  shift, and go to state 25

    ARR_ID  go to state 26


State 17

    8 feild_method: type ID ASS . literal SEMCOL

    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30

    literal  go to state 31


State 18

    4 feild_method: type ID OP . args CP block

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    $default  reduce using rule 16 (args)

    args  go to state 32
    arg   go to state 24


State 19

    6 feild_method: type ID OS . int_literal CS ARR_IDS SEMCOL

    int_literal  shift, and go to state 33


State 20

    7 feild_method: type ID ARR_IDS . SEMCOL

    SEMCOL  shift, and go to state 34


State 21

   20 arg: INT . ID

    ID  shift, and go to state 35


State 22

   19 arg: BOOL . ID

    ID  shift, and go to state 36


State 23

    5 feild_method: VOID ID OP args . CP block

    CP  shift, and go to state 37


State 24

   15 args: arg . args1

    COMMA  shift, and go to state 38

    $default  reduce using rule 18 (args1)

    args1  go to state 39


State 25

   13 ARR_ID: ID .
   14       | ID . OS int_literal CS

    OS  shift, and go to state 40

    $default  reduce using rule 13 (ARR_ID)


State 26

   11 ARR_IDS: COMMA ARR_ID . ARR_IDS

    COMMA  shift, and go to state 16

    $default  reduce using rule 12 (ARR_IDS)

    ARR_IDS  go to state 41


State 27

   83 literal: bool_literal .

    $default  reduce using rule 83 (literal)


State 28

   82 literal: char_literal .

    $default  reduce using rule 82 (literal)


State 29

   81 literal: string_literal .

    $default  reduce using rule 81 (literal)


State 30

   80 literal: int_literal .

    $default  reduce using rule 80 (literal)


State 31

    8 feild_method: type ID ASS literal . SEMCOL

    SEMCOL  shift, and go to state 42


State 32

    4 feild_method: type ID OP args . CP block

    CP  shift, and go to state 43


State 33

    6 feild_method: type ID OS int_literal . CS ARR_IDS SEMCOL

    CS  shift, and go to state 44


State 34

    7 feild_method: type ID ARR_IDS SEMCOL .

    $default  reduce using rule 7 (feild_method)


State 35

   20 arg: INT ID .

    $default  reduce using rule 20 (arg)


State 36

   19 arg: BOOL ID .

    $default  reduce using rule 19 (arg)


State 37

    5 feild_method: VOID ID OP args CP . block

    OB  shift, and go to state 45

    block  go to state 46


State 38

   17 args1: COMMA . arg args1

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    arg  go to state 47


State 39

   15 args: arg args1 .

    $default  reduce using rule 15 (args)


State 40

   14 ARR_ID: ID OS . int_literal CS

    int_literal  shift, and go to state 48


State 41

   11 ARR_IDS: COMMA ARR_ID ARR_IDS .

    $default  reduce using rule 11 (ARR_IDS)


State 42

    8 feild_method: type ID ASS literal SEMCOL .

    $default  reduce using rule 8 (feild_method)


State 43

    4 feild_method: type ID OP args CP . block

    OB  shift, and go to state 45

    block  go to state 49


State 44

    6 feild_method: type ID OS int_literal CS . ARR_IDS SEMCOL

    COMMA  shift, and go to state 16

    $default  reduce using rule 12 (ARR_IDS)

    ARR_IDS  go to state 50


State 45

   22 block: OB . $@1 var_decls stmts CB

    $default  reduce using rule 21 ($@1)

    $@1  go to state 51


State 46

    5 feild_method: VOID ID OP args CP block .

    $default  reduce using rule 5 (feild_method)


State 47

   17 args1: COMMA arg . args1

    COMMA  shift, and go to state 38

    $default  reduce using rule 18 (args1)

    args1  go to state 52


State 48

   14 ARR_ID: ID OS int_literal . CS

    CS  shift, and go to state 53


State 49

    4 feild_method: type ID OP args CP block .

    $default  reduce using rule 4 (feild_method)


State 50

    6 feild_method: type ID OS int_literal CS ARR_IDS . SEMCOL

    SEMCOL  shift, and go to state 54


State 51

   22 block: OB $@1 . var_decls stmts CB

    $default  reduce using rule 24 (var_decls)

    var_decls  go to state 55


State 52

   17 args1: COMMA arg args1 .

    $default  reduce using rule 17 (args1)


State 53

   14 ARR_ID: ID OS int_literal CS .

    $default  reduce using rule 14 (ARR_ID)


State 54

    6 feild_method: type ID OS int_literal CS ARR_IDS SEMCOL .

    $default  reduce using rule 6 (feild_method)


State 55

   22 block: OB $@1 var_decls . stmts CB
   23 var_decls: var_decls . var_decl

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    $default  reduce using rule 30 (stmts)

    arg       go to state 56
    var_decl  go to state 57
    stmts     go to state 58


State 56

   25 var_decl: arg . vars SEMCOL

    COMMA  shift, and go to state 59

    $default  reduce using rule 27 (vars)

    vars  go to state 60


State 57

   23 var_decls: var_decls var_decl .

    $default  reduce using rule 23 (var_decls)


State 58

   22 block: OB $@1 var_decls stmts . CB
   29 stmts: stmts . M stmt

    CB  shift, and go to state 61

    $default  reduce using rule 84 (M)

    M  go to state 62


State 59

   26 vars: COMMA . var vars

    ID  shift, and go to state 63

    var  go to state 64


State 60

   25 var_decl: arg vars . SEMCOL

    SEMCOL  shift, and go to state 65


State 61

   22 block: OB $@1 var_decls stmts CB .

    $default  reduce using rule 22 (block)


State 62

   29 stmts: stmts M . stmt

    IF              shift, and go to state 66
    FOR             shift, and go to state 67
    ID              shift, and go to state 68
    CALLOUT         shift, and go to state 69
    BREAK           shift, and go to state 70
    CONTINUE        shift, and go to state 71
    RETURN          shift, and go to state 72
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75
    OB              shift, and go to state 45

    block        go to state 76
    stmt         go to state 77
    method_call  go to state 78
    expr_a       go to state 79
    location     go to state 80
    expr_or      go to state 81
    expr_and     go to state 82
    expr_eq      go to state 83
    expr_rel     go to state 84
    expr_pm      go to state 85
    expr_mdm     go to state 86
    factor       go to state 87
    literal      go to state 88


State 63

   28 var: ID .

    $default  reduce using rule 28 (var)


State 64

   26 vars: COMMA var . vars

    COMMA  shift, and go to state 59

    $default  reduce using rule 27 (vars)

    vars  go to state 89


State 65

   25 var_decl: arg vars SEMCOL .

    $default  reduce using rule 25 (var_decl)


State 66

   33 stmt: IF . OP expr_a CP M block
   34     | IF . OP expr_a CP M block ELSE M block

    OP  shift, and go to state 90


State 67

   35 stmt: FOR . fexpr COMMA expr_a block

    ID  shift, and go to state 91

    fexpr  go to state 92


State 68

   48 expr_a: ID . OP expr_rec CP
   49 location: ID .
   50         | ID . OS expr_a CS
   78 factor: ID . OS expr_a CS
   79       | ID .

    OP  shift, and go to state 93
    OS  shift, and go to state 94

    ASS       reduce using rule 49 (location)
    PASS      reduce using rule 49 (location)
    MASS      reduce using rule 49 (location)
    $default  reduce using rule 79 (factor)


State 69

   40 method_call: CALLOUT . OP string_literal CP

    OP  shift, and go to state 95


State 70

   37 stmt: BREAK . SEMCOL

    SEMCOL  shift, and go to state 96


State 71

   38 stmt: CONTINUE . SEMCOL

    SEMCOL  shift, and go to state 97


State 72

   36 stmt: RETURN . Rexpr SEMCOL

    OP  shift, and go to state 98

    $default  reduce using rule 42 (Rexpr)

    Rexpr  go to state 99


State 73

   76 factor: MINUS . factor

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    factor   go to state 101
    literal  go to state 88


State 74

   75 factor: NOT . factor

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    factor   go to state 102
    literal  go to state 88


State 75

   74 factor: OP . expr_a CP

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 103
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 76

   31 stmt: block .

    $default  reduce using rule 31 (stmt)


State 77

   29 stmts: stmts M stmt .

    $default  reduce using rule 29 (stmts)


State 78

   39 stmt: method_call . SEMCOL

    SEMCOL  shift, and go to state 104


State 79

   32 stmt: expr_a . SEMCOL

    SEMCOL  shift, and go to state 105


State 80

   45 expr_a: location . ASS expr_or
   46       | location . PASS expr_or
   47       | location . MASS expr_or

    ASS   shift, and go to state 106
    PASS  shift, and go to state 107
    MASS  shift, and go to state 108


State 81

   44 expr_a: expr_or .
   56 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 109

    $default  reduce using rule 44 (expr_a)


State 82

   55 expr_or: expr_and .
   58 expr_and: expr_and . AND expr_eq

    AND  shift, and go to state 110

    $default  reduce using rule 55 (expr_or)


State 83

   57 expr_and: expr_eq .
   60 expr_eq: expr_eq . EQ expr_rel
   61        | expr_eq . NE expr_rel

    NE  shift, and go to state 111
    EQ  shift, and go to state 112

    $default  reduce using rule 57 (expr_and)


State 84

   59 expr_eq: expr_rel .
   63 expr_rel: expr_rel . LT expr_pm
   64         | expr_rel . GT expr_pm
   65         | expr_rel . LE expr_pm
   66         | expr_rel . GE expr_pm

    LT  shift, and go to state 113
    GT  shift, and go to state 114
    LE  shift, and go to state 115
    GE  shift, and go to state 116

    $default  reduce using rule 59 (expr_eq)


State 85

   62 expr_rel: expr_pm .
   68 expr_pm: expr_pm . PLUS expr_mdm
   69        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 62 (expr_rel)


State 86

   67 expr_pm: expr_mdm .
   71 expr_mdm: expr_mdm . MUL factor
   72         | expr_mdm . DIV factor
   73         | expr_mdm . MOD factor

    MUL  shift, and go to state 119
    DIV  shift, and go to state 120
    MOD  shift, and go to state 121

    $default  reduce using rule 67 (expr_pm)


State 87

   70 expr_mdm: factor .

    $default  reduce using rule 70 (expr_mdm)


State 88

   77 factor: literal .

    $default  reduce using rule 77 (factor)


State 89

   26 vars: COMMA var vars .

    $default  reduce using rule 26 (vars)


State 90

   33 stmt: IF OP . expr_a CP M block
   34     | IF OP . expr_a CP M block ELSE M block

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 122
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 91

   43 fexpr: ID . ASS expr_a

    ASS  shift, and go to state 123


State 92

   35 stmt: FOR fexpr . COMMA expr_a block

    COMMA  shift, and go to state 124


State 93

   48 expr_a: ID OP . expr_rec CP

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    $default  reduce using rule 52 (expr_rec)

    expr_a    go to state 125
    location  go to state 80
    expr_rec  go to state 126
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 94

   50 location: ID OS . expr_a CS
   78 factor: ID OS . expr_a CS

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 127
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 95

   40 method_call: CALLOUT OP . string_literal CP

    string_literal  shift, and go to state 128


State 96

   37 stmt: BREAK SEMCOL .

    $default  reduce using rule 37 (stmt)


State 97

   38 stmt: CONTINUE SEMCOL .

    $default  reduce using rule 38 (stmt)


State 98

   41 Rexpr: OP . expr_a CP

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 129
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 99

   36 stmt: RETURN Rexpr . SEMCOL

    SEMCOL  shift, and go to state 130


State 100

   78 factor: ID . OS expr_a CS
   79       | ID .

    OS  shift, and go to state 131

    $default  reduce using rule 79 (factor)


State 101

   76 factor: MINUS factor .

    $default  reduce using rule 76 (factor)


State 102

   75 factor: NOT factor .

    $default  reduce using rule 75 (factor)


State 103

   74 factor: OP expr_a . CP

    CP  shift, and go to state 132


State 104

   39 stmt: method_call SEMCOL .

    $default  reduce using rule 39 (stmt)


State 105

   32 stmt: expr_a SEMCOL .

    $default  reduce using rule 32 (stmt)


State 106

   45 expr_a: location ASS . expr_or

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_or   go to state 133
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 107

   46 expr_a: location PASS . expr_or

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_or   go to state 134
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 108

   47 expr_a: location MASS . expr_or

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_or   go to state 135
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 109

   56 expr_or: expr_or OR . expr_and

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_and  go to state 136
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 110

   58 expr_and: expr_and AND . expr_eq

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_eq   go to state 137
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 111

   61 expr_eq: expr_eq NE . expr_rel

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_rel  go to state 138
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 112

   60 expr_eq: expr_eq EQ . expr_rel

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_rel  go to state 139
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 113

   63 expr_rel: expr_rel LT . expr_pm

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_pm   go to state 140
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 114

   64 expr_rel: expr_rel GT . expr_pm

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_pm   go to state 141
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 115

   65 expr_rel: expr_rel LE . expr_pm

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_pm   go to state 142
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 116

   66 expr_rel: expr_rel GE . expr_pm

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_pm   go to state 143
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 117

   68 expr_pm: expr_pm PLUS . expr_mdm

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_mdm  go to state 144
    factor    go to state 87
    literal   go to state 88


State 118

   69 expr_pm: expr_pm MINUS . expr_mdm

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_mdm  go to state 145
    factor    go to state 87
    literal   go to state 88


State 119

   71 expr_mdm: expr_mdm MUL . factor

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    factor   go to state 146
    literal  go to state 88


State 120

   72 expr_mdm: expr_mdm DIV . factor

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    factor   go to state 147
    literal  go to state 88


State 121

   73 expr_mdm: expr_mdm MOD . factor

    ID              shift, and go to state 100
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    factor   go to state 148
    literal  go to state 88


State 122

   33 stmt: IF OP expr_a . CP M block
   34     | IF OP expr_a . CP M block ELSE M block

    CP  shift, and go to state 149


State 123

   43 fexpr: ID ASS . expr_a

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 150
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 124

   35 stmt: FOR fexpr COMMA . expr_a block

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 151
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 125

   51 expr_rec: expr_a . expr_rec2

    COMMA  shift, and go to state 152

    $default  reduce using rule 54 (expr_rec2)

    expr_rec2  go to state 153


State 126

   48 expr_a: ID OP expr_rec . CP

    CP  shift, and go to state 154


State 127

   50 location: ID OS expr_a . CS
   78 factor: ID OS expr_a . CS

    CS  shift, and go to state 155


State 128

   40 method_call: CALLOUT OP string_literal . CP

    CP  shift, and go to state 156


State 129

   41 Rexpr: OP expr_a . CP

    CP  shift, and go to state 157


State 130

   36 stmt: RETURN Rexpr SEMCOL .

    $default  reduce using rule 36 (stmt)


State 131

   78 factor: ID OS . expr_a CS

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 158
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 132

   74 factor: OP expr_a CP .

    $default  reduce using rule 74 (factor)


State 133

   45 expr_a: location ASS expr_or .
   56 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 109

    $default  reduce using rule 45 (expr_a)


State 134

   46 expr_a: location PASS expr_or .
   56 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 109

    $default  reduce using rule 46 (expr_a)


State 135

   47 expr_a: location MASS expr_or .
   56 expr_or: expr_or . OR expr_and

    OR  shift, and go to state 109

    $default  reduce using rule 47 (expr_a)


State 136

   56 expr_or: expr_or OR expr_and .
   58 expr_and: expr_and . AND expr_eq

    AND  shift, and go to state 110

    $default  reduce using rule 56 (expr_or)


State 137

   58 expr_and: expr_and AND expr_eq .
   60 expr_eq: expr_eq . EQ expr_rel
   61        | expr_eq . NE expr_rel

    NE  shift, and go to state 111
    EQ  shift, and go to state 112

    $default  reduce using rule 58 (expr_and)


State 138

   61 expr_eq: expr_eq NE expr_rel .
   63 expr_rel: expr_rel . LT expr_pm
   64         | expr_rel . GT expr_pm
   65         | expr_rel . LE expr_pm
   66         | expr_rel . GE expr_pm

    LT  shift, and go to state 113
    GT  shift, and go to state 114
    LE  shift, and go to state 115
    GE  shift, and go to state 116

    $default  reduce using rule 61 (expr_eq)


State 139

   60 expr_eq: expr_eq EQ expr_rel .
   63 expr_rel: expr_rel . LT expr_pm
   64         | expr_rel . GT expr_pm
   65         | expr_rel . LE expr_pm
   66         | expr_rel . GE expr_pm

    LT  shift, and go to state 113
    GT  shift, and go to state 114
    LE  shift, and go to state 115
    GE  shift, and go to state 116

    $default  reduce using rule 60 (expr_eq)


State 140

   63 expr_rel: expr_rel LT expr_pm .
   68 expr_pm: expr_pm . PLUS expr_mdm
   69        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 63 (expr_rel)


State 141

   64 expr_rel: expr_rel GT expr_pm .
   68 expr_pm: expr_pm . PLUS expr_mdm
   69        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 64 (expr_rel)


State 142

   65 expr_rel: expr_rel LE expr_pm .
   68 expr_pm: expr_pm . PLUS expr_mdm
   69        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 65 (expr_rel)


State 143

   66 expr_rel: expr_rel GE expr_pm .
   68 expr_pm: expr_pm . PLUS expr_mdm
   69        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 117
    MINUS  shift, and go to state 118

    $default  reduce using rule 66 (expr_rel)


State 144

   68 expr_pm: expr_pm PLUS expr_mdm .
   71 expr_mdm: expr_mdm . MUL factor
   72         | expr_mdm . DIV factor
   73         | expr_mdm . MOD factor

    MUL  shift, and go to state 119
    DIV  shift, and go to state 120
    MOD  shift, and go to state 121

    $default  reduce using rule 68 (expr_pm)


State 145

   69 expr_pm: expr_pm MINUS expr_mdm .
   71 expr_mdm: expr_mdm . MUL factor
   72         | expr_mdm . DIV factor
   73         | expr_mdm . MOD factor

    MUL  shift, and go to state 119
    DIV  shift, and go to state 120
    MOD  shift, and go to state 121

    $default  reduce using rule 69 (expr_pm)


State 146

   71 expr_mdm: expr_mdm MUL factor .

    $default  reduce using rule 71 (expr_mdm)


State 147

   72 expr_mdm: expr_mdm DIV factor .

    $default  reduce using rule 72 (expr_mdm)


State 148

   73 expr_mdm: expr_mdm MOD factor .

    $default  reduce using rule 73 (expr_mdm)


State 149

   33 stmt: IF OP expr_a CP . M block
   34     | IF OP expr_a CP . M block ELSE M block

    $default  reduce using rule 84 (M)

    M  go to state 159


State 150

   43 fexpr: ID ASS expr_a .

    $default  reduce using rule 43 (fexpr)


State 151

   35 stmt: FOR fexpr COMMA expr_a . block

    OB  shift, and go to state 45

    block  go to state 160


State 152

   53 expr_rec2: COMMA . expr_a expr_rec2

    ID              shift, and go to state 68
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 73
    NOT             shift, and go to state 74
    OP              shift, and go to state 75

    expr_a    go to state 161
    location  go to state 80
    expr_or   go to state 81
    expr_and  go to state 82
    expr_eq   go to state 83
    expr_rel  go to state 84
    expr_pm   go to state 85
    expr_mdm  go to state 86
    factor    go to state 87
    literal   go to state 88


State 153

   51 expr_rec: expr_a expr_rec2 .

    $default  reduce using rule 51 (expr_rec)


State 154

   48 expr_a: ID OP expr_rec CP .

    $default  reduce using rule 48 (expr_a)


State 155

   50 location: ID OS expr_a CS .
   78 factor: ID OS expr_a CS .

    ASS       reduce using rule 50 (location)
    PASS      reduce using rule 50 (location)
    MASS      reduce using rule 50 (location)
    $default  reduce using rule 78 (factor)


State 156

   40 method_call: CALLOUT OP string_literal CP .

    $default  reduce using rule 40 (method_call)


State 157

   41 Rexpr: OP expr_a CP .

    $default  reduce using rule 41 (Rexpr)


State 158

   78 factor: ID OS expr_a . CS

    CS  shift, and go to state 162


State 159

   33 stmt: IF OP expr_a CP M . block
   34     | IF OP expr_a CP M . block ELSE M block

    OB  shift, and go to state 45

    block  go to state 163


State 160

   35 stmt: FOR fexpr COMMA expr_a block .

    $default  reduce using rule 35 (stmt)


State 161

   53 expr_rec2: COMMA expr_a . expr_rec2

    COMMA  shift, and go to state 152

    $default  reduce using rule 54 (expr_rec2)

    expr_rec2  go to state 164


State 162

   78 factor: ID OS expr_a CS .

    $default  reduce using rule 78 (factor)


State 163

   33 stmt: IF OP expr_a CP M block .
   34     | IF OP expr_a CP M block . ELSE M block

    ELSE  shift, and go to state 165

    $default  reduce using rule 33 (stmt)


State 164

   53 expr_rec2: COMMA expr_a expr_rec2 .

    $default  reduce using rule 53 (expr_rec2)


State 165

   34 stmt: IF OP expr_a CP M block ELSE . M block

    $default  reduce using rule 84 (M)

    M  go to state 166


State 166

   34 stmt: IF OP expr_a CP M block ELSE M . block

    OB  shift, and go to state 45

    block  go to state 167


State 167

   34 stmt: IF OP expr_a CP M block ELSE M block .

    $default  reduce using rule 34 (stmt)

Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OB feild_methods CB

    2 feild_methods: feild_methods feild_method
    3              | %empty

    4 $@1: %empty

    5 feild_method: type ID OP args CP $@1 block

    6 $@2: %empty

    7 feild_method: VOID ID OP args CP $@2 block
    8             | type ID OS int_literal CS ARR_IDS SEMCOL
    9             | type ID ARR_IDS SEMCOL
   10             | type ID ASS literal SEMCOL

   11 type: INT
   12     | BOOL

   13 ARR_IDS: COMMA ARR_ID ARR_IDS
   14        | %empty

   15 ARR_ID: ID
   16       | ID OS int_literal CS

   17 args: arg args1
   18     | %empty

   19 args1: COMMA arg args1
   20      | %empty

   21 arg: BOOL ID
   22    | INT ID

   23 $@3: %empty

   24 block: OB $@3 var_decls stmts CB

   25 var_decls: var_decls var_decl
   26          | %empty

   27 var_decl: arg vars SEMCOL

   28 vars: COMMA var vars
   29     | %empty

   30 var: ID

   31 stmts: stmts M stmt
   32      | %empty

   33 stmt: block
   34     | expr_a SEMCOL
   35     | IF OP expr_a CP M block
   36     | IF OP expr_a CP M block ELSE M block
   37     | FOR fexpr COMMA expr_a block
   38     | RETURN Rexpr SEMCOL
   39     | BREAK SEMCOL
   40     | CONTINUE SEMCOL
   41     | method_call SEMCOL

   42 method_call: CALLOUT OP string_literal CP

   43 Rexpr: OP expr_a CP
   44      | %empty

   45 fexpr: ID ASS expr_a

   46 expr_a: expr_or
   47       | location ASS expr_or
   48       | location PASS expr_or
   49       | location MASS expr_or
   50       | ID OP expr_rec CP

   51 location: ID
   52         | ID OS expr_a CS

   53 expr_rec: expr_a expr_rec2
   54         | %empty

   55 expr_rec2: COMMA expr_a expr_rec2
   56          | %empty

   57 expr_or: expr_and
   58        | expr_or OR M expr_and

   59 expr_and: expr_eq
   60         | expr_and AND M expr_eq

   61 expr_eq: expr_rel
   62        | expr_eq EQ expr_rel
   63        | expr_eq NE expr_rel

   64 expr_rel: expr_pm
   65         | expr_rel LT expr_pm
   66         | expr_rel GT expr_pm
   67         | expr_rel LE expr_pm
   68         | expr_rel GE expr_pm

   69 expr_pm: expr_mdm
   70        | expr_pm PLUS expr_mdm
   71        | expr_pm MINUS expr_mdm

   72 expr_mdm: factor
   73         | expr_mdm MUL factor
   74         | expr_mdm DIV factor
   75         | expr_mdm MOD factor

   76 factor: OP expr_a CP
   77       | NOT factor
   78       | MINUS factor
   79       | literal
   80       | ID OS expr_a CS
   81       | ID

   82 literal: int_literal
   83        | string_literal
   84        | char_literal
   85        | bool_literal

   86 M: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
CLASS (258) 1
PROGRAM (259) 1
IF (260) 35 36
FOR (261) 37
ID (262) 5 7 8 9 10 15 16 21 22 30 45 50 51 52 80 81
VOID (263) 7
INT (264) 11 22
BOOL (265) 12 21
CALLOUT (266) 42
BREAK (267) 39
CONTINUE (268) 40
ELSE (269) 36
RETURN (270) 38
bool_literal (271) 85
char_literal (272) 84
string_literal (273) 42 83
int_literal (274) 8 16 82
COMMA (275) 13 19 28 37 55
SEMCOL (276) 8 9 10 27 34 38 39 40 41
PLUS (277) 70
MINUS (278) 71 78
MUL (279) 73
DIV (280) 74
MOD (281) 75
LT (282) 65
GT (283) 66
LE (284) 67
GE (285) 68
NE (286) 63
EQ (287) 62
ASS (288) 10 45 47
PASS (289) 48
MASS (290) 49
AND (291) 60
OR (292) 58
NOT (293) 77
OP (294) 5 7 35 36 42 43 50 76
CP (295) 5 7 35 36 42 43 50 76
OB (296) 1 24
CB (297) 1 24
OS (298) 8 16 52 80
CS (299) 8 16 52 80
UMINUS (300)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
feild_methods (48)
    on left: 2 3, on right: 1 2
feild_method (49)
    on left: 5 7 8 9 10, on right: 2
$@1 (50)
    on left: 4, on right: 5
$@2 (51)
    on left: 6, on right: 7
type (52)
    on left: 11 12, on right: 5 8 9 10
ARR_IDS (53)
    on left: 13 14, on right: 8 9 13
ARR_ID (54)
    on left: 15 16, on right: 13
args (55)
    on left: 17 18, on right: 5 7
args1 (56)
    on left: 19 20, on right: 17 19
arg (57)
    on left: 21 22, on right: 17 19 27
block (58)
    on left: 24, on right: 5 7 33 35 36 37
$@3 (59)
    on left: 23, on right: 24
var_decls (60)
    on left: 25 26, on right: 24 25
var_decl (61)
    on left: 27, on right: 25
vars (62)
    on left: 28 29, on right: 27 28
var (63)
    on left: 30, on right: 28
stmts (64)
    on left: 31 32, on right: 24 31
stmt (65)
    on left: 33 34 35 36 37 38 39 40 41, on right: 31
method_call (66)
    on left: 42, on right: 41
Rexpr (67)
    on left: 43 44, on right: 38
fexpr (68)
    on left: 45, on right: 37
expr_a (69)
    on left: 46 47 48 49 50, on right: 34 35 36 37 43 45 52 53 55 76
    80
location (70)
    on left: 51 52, on right: 47 48 49
expr_rec (71)
    on left: 53 54, on right: 50
expr_rec2 (72)
    on left: 55 56, on right: 53 55
expr_or (73)
    on left: 57 58, on right: 46 47 48 49 58
expr_and (74)
    on left: 59 60, on right: 57 58 60
expr_eq (75)
    on left: 61 62 63, on right: 59 60 62 63
expr_rel (76)
    on left: 64 65 66 67 68, on right: 61 62 63 65 66 67 68
expr_pm (77)
    on left: 69 70 71, on right: 64 65 66 67 68 70 71
expr_mdm (78)
    on left: 72 73 74 75, on right: 69 70 71 73 74 75
factor (79)
    on left: 76 77 78 79 80 81, on right: 72 73 74 75 77 78
literal (80)
    on left: 82 83 84 85, on right: 10 79
M (81)
    on left: 86, on right: 31 35 36 58 60


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OB feild_methods CB

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OB feild_methods CB

    OB  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OB . feild_methods CB

    $default  reduce using rule 3 (feild_methods)

    feild_methods  go to state 6


State 6

    1 program: CLASS PROGRAM OB feild_methods . CB
    2 feild_methods: feild_methods . feild_method

    VOID  shift, and go to state 7
    INT   shift, and go to state 8
    BOOL  shift, and go to state 9
    CB    shift, and go to state 10

    feild_method  go to state 11
    type          go to state 12


State 7

    7 feild_method: VOID . ID OP args CP $@2 block

    ID  shift, and go to state 13


State 8

   11 type: INT .

    $default  reduce using rule 11 (type)


State 9

   12 type: BOOL .

    $default  reduce using rule 12 (type)


State 10

    1 program: CLASS PROGRAM OB feild_methods CB .

    $default  reduce using rule 1 (program)


State 11

    2 feild_methods: feild_methods feild_method .

    $default  reduce using rule 2 (feild_methods)


State 12

    5 feild_method: type . ID OP args CP $@1 block
    8             | type . ID OS int_literal CS ARR_IDS SEMCOL
    9             | type . ID ARR_IDS SEMCOL
   10             | type . ID ASS literal SEMCOL

    ID  shift, and go to state 14


State 13

    7 feild_method: VOID ID . OP args CP $@2 block

    OP  shift, and go to state 15


State 14

    5 feild_method: type ID . OP args CP $@1 block
    8             | type ID . OS int_literal CS ARR_IDS SEMCOL
    9             | type ID . ARR_IDS SEMCOL
   10             | type ID . ASS literal SEMCOL

    COMMA  shift, and go to state 16
    ASS    shift, and go to state 17
    OP     shift, and go to state 18
    OS     shift, and go to state 19

    $default  reduce using rule 14 (ARR_IDS)

    ARR_IDS  go to state 20


State 15

    7 feild_method: VOID ID OP . args CP $@2 block

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    $default  reduce using rule 18 (args)

    args  go to state 23
    arg   go to state 24


State 16

   13 ARR_IDS: COMMA . ARR_ID ARR_IDS

    ID  shift, and go to state 25

    ARR_ID  go to state 26


State 17

   10 feild_method: type ID ASS . literal SEMCOL

    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30

    literal  go to state 31


State 18

    5 feild_method: type ID OP . args CP $@1 block

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    $default  reduce using rule 18 (args)

    args  go to state 32
    arg   go to state 24


State 19

    8 feild_method: type ID OS . int_literal CS ARR_IDS SEMCOL

    int_literal  shift, and go to state 33


State 20

    9 feild_method: type ID ARR_IDS . SEMCOL

    SEMCOL  shift, and go to state 34


State 21

   22 arg: INT . ID

    ID  shift, and go to state 35


State 22

   21 arg: BOOL . ID

    ID  shift, and go to state 36


State 23

    7 feild_method: VOID ID OP args . CP $@2 block

    CP  shift, and go to state 37


State 24

   17 args: arg . args1

    COMMA  shift, and go to state 38

    $default  reduce using rule 20 (args1)

    args1  go to state 39


State 25

   15 ARR_ID: ID .
   16       | ID . OS int_literal CS

    OS  shift, and go to state 40

    $default  reduce using rule 15 (ARR_ID)


State 26

   13 ARR_IDS: COMMA ARR_ID . ARR_IDS

    COMMA  shift, and go to state 16

    $default  reduce using rule 14 (ARR_IDS)

    ARR_IDS  go to state 41


State 27

   85 literal: bool_literal .

    $default  reduce using rule 85 (literal)


State 28

   84 literal: char_literal .

    $default  reduce using rule 84 (literal)


State 29

   83 literal: string_literal .

    $default  reduce using rule 83 (literal)


State 30

   82 literal: int_literal .

    $default  reduce using rule 82 (literal)


State 31

   10 feild_method: type ID ASS literal . SEMCOL

    SEMCOL  shift, and go to state 42


State 32

    5 feild_method: type ID OP args . CP $@1 block

    CP  shift, and go to state 43


State 33

    8 feild_method: type ID OS int_literal . CS ARR_IDS SEMCOL

    CS  shift, and go to state 44


State 34

    9 feild_method: type ID ARR_IDS SEMCOL .

    $default  reduce using rule 9 (feild_method)


State 35

   22 arg: INT ID .

    $default  reduce using rule 22 (arg)


State 36

   21 arg: BOOL ID .

    $default  reduce using rule 21 (arg)


State 37

    7 feild_method: VOID ID OP args CP . $@2 block

    $default  reduce using rule 6 ($@2)

    $@2  go to state 45


State 38

   19 args1: COMMA . arg args1

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    arg  go to state 46


State 39

   17 args: arg args1 .

    $default  reduce using rule 17 (args)


State 40

   16 ARR_ID: ID OS . int_literal CS

    int_literal  shift, and go to state 47


State 41

   13 ARR_IDS: COMMA ARR_ID ARR_IDS .

    $default  reduce using rule 13 (ARR_IDS)


State 42

   10 feild_method: type ID ASS literal SEMCOL .

    $default  reduce using rule 10 (feild_method)


State 43

    5 feild_method: type ID OP args CP . $@1 block

    $default  reduce using rule 4 ($@1)

    $@1  go to state 48


State 44

    8 feild_method: type ID OS int_literal CS . ARR_IDS SEMCOL

    COMMA  shift, and go to state 16

    $default  reduce using rule 14 (ARR_IDS)

    ARR_IDS  go to state 49


State 45

    7 feild_method: VOID ID OP args CP $@2 . block

    OB  shift, and go to state 50

    block  go to state 51


State 46

   19 args1: COMMA arg . args1

    COMMA  shift, and go to state 38

    $default  reduce using rule 20 (args1)

    args1  go to state 52


State 47

   16 ARR_ID: ID OS int_literal . CS

    CS  shift, and go to state 53


State 48

    5 feild_method: type ID OP args CP $@1 . block

    OB  shift, and go to state 50

    block  go to state 54


State 49

    8 feild_method: type ID OS int_literal CS ARR_IDS . SEMCOL

    SEMCOL  shift, and go to state 55


State 50

   24 block: OB . $@3 var_decls stmts CB

    $default  reduce using rule 23 ($@3)

    $@3  go to state 56


State 51

    7 feild_method: VOID ID OP args CP $@2 block .

    $default  reduce using rule 7 (feild_method)


State 52

   19 args1: COMMA arg args1 .

    $default  reduce using rule 19 (args1)


State 53

   16 ARR_ID: ID OS int_literal CS .

    $default  reduce using rule 16 (ARR_ID)


State 54

    5 feild_method: type ID OP args CP $@1 block .

    $default  reduce using rule 5 (feild_method)


State 55

    8 feild_method: type ID OS int_literal CS ARR_IDS SEMCOL .

    $default  reduce using rule 8 (feild_method)


State 56

   24 block: OB $@3 . var_decls stmts CB

    $default  reduce using rule 26 (var_decls)

    var_decls  go to state 57


State 57

   24 block: OB $@3 var_decls . stmts CB
   25 var_decls: var_decls . var_decl

    INT   shift, and go to state 21
    BOOL  shift, and go to state 22

    $default  reduce using rule 32 (stmts)

    arg       go to state 58
    var_decl  go to state 59
    stmts     go to state 60


State 58

   27 var_decl: arg . vars SEMCOL

    COMMA  shift, and go to state 61

    $default  reduce using rule 29 (vars)

    vars  go to state 62


State 59

   25 var_decls: var_decls var_decl .

    $default  reduce using rule 25 (var_decls)


State 60

   24 block: OB $@3 var_decls stmts . CB
   31 stmts: stmts . M stmt

    CB  shift, and go to state 63

    $default  reduce using rule 86 (M)

    M  go to state 64


State 61

   28 vars: COMMA . var vars

    ID  shift, and go to state 65

    var  go to state 66


State 62

   27 var_decl: arg vars . SEMCOL

    SEMCOL  shift, and go to state 67


State 63

   24 block: OB $@3 var_decls stmts CB .

    $default  reduce using rule 24 (block)


State 64

   31 stmts: stmts M . stmt

    IF              shift, and go to state 68
    FOR             shift, and go to state 69
    ID              shift, and go to state 70
    CALLOUT         shift, and go to state 71
    BREAK           shift, and go to state 72
    CONTINUE        shift, and go to state 73
    RETURN          shift, and go to state 74
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77
    OB              shift, and go to state 50

    block        go to state 78
    stmt         go to state 79
    method_call  go to state 80
    expr_a       go to state 81
    location     go to state 82
    expr_or      go to state 83
    expr_and     go to state 84
    expr_eq      go to state 85
    expr_rel     go to state 86
    expr_pm      go to state 87
    expr_mdm     go to state 88
    factor       go to state 89
    literal      go to state 90


State 65

   30 var: ID .

    $default  reduce using rule 30 (var)


State 66

   28 vars: COMMA var . vars

    COMMA  shift, and go to state 61

    $default  reduce using rule 29 (vars)

    vars  go to state 91


State 67

   27 var_decl: arg vars SEMCOL .

    $default  reduce using rule 27 (var_decl)


State 68

   35 stmt: IF . OP expr_a CP M block
   36     | IF . OP expr_a CP M block ELSE M block

    OP  shift, and go to state 92


State 69

   37 stmt: FOR . fexpr COMMA expr_a block

    ID  shift, and go to state 93

    fexpr  go to state 94


State 70

   50 expr_a: ID . OP expr_rec CP
   51 location: ID .
   52         | ID . OS expr_a CS
   80 factor: ID . OS expr_a CS
   81       | ID .

    OP  shift, and go to state 95
    OS  shift, and go to state 96

    ASS       reduce using rule 51 (location)
    PASS      reduce using rule 51 (location)
    MASS      reduce using rule 51 (location)
    $default  reduce using rule 81 (factor)


State 71

   42 method_call: CALLOUT . OP string_literal CP

    OP  shift, and go to state 97


State 72

   39 stmt: BREAK . SEMCOL

    SEMCOL  shift, and go to state 98


State 73

   40 stmt: CONTINUE . SEMCOL

    SEMCOL  shift, and go to state 99


State 74

   38 stmt: RETURN . Rexpr SEMCOL

    OP  shift, and go to state 100

    $default  reduce using rule 44 (Rexpr)

    Rexpr  go to state 101


State 75

   78 factor: MINUS . factor

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    factor   go to state 103
    literal  go to state 90


State 76

   77 factor: NOT . factor

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    factor   go to state 104
    literal  go to state 90


State 77

   76 factor: OP . expr_a CP

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 105
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 78

   33 stmt: block .

    $default  reduce using rule 33 (stmt)


State 79

   31 stmts: stmts M stmt .

    $default  reduce using rule 31 (stmts)


State 80

   41 stmt: method_call . SEMCOL

    SEMCOL  shift, and go to state 106


State 81

   34 stmt: expr_a . SEMCOL

    SEMCOL  shift, and go to state 107


State 82

   47 expr_a: location . ASS expr_or
   48       | location . PASS expr_or
   49       | location . MASS expr_or

    ASS   shift, and go to state 108
    PASS  shift, and go to state 109
    MASS  shift, and go to state 110


State 83

   46 expr_a: expr_or .
   58 expr_or: expr_or . OR M expr_and

    OR  shift, and go to state 111

    $default  reduce using rule 46 (expr_a)


State 84

   57 expr_or: expr_and .
   60 expr_and: expr_and . AND M expr_eq

    AND  shift, and go to state 112

    $default  reduce using rule 57 (expr_or)


State 85

   59 expr_and: expr_eq .
   62 expr_eq: expr_eq . EQ expr_rel
   63        | expr_eq . NE expr_rel

    NE  shift, and go to state 113
    EQ  shift, and go to state 114

    $default  reduce using rule 59 (expr_and)


State 86

   61 expr_eq: expr_rel .
   65 expr_rel: expr_rel . LT expr_pm
   66         | expr_rel . GT expr_pm
   67         | expr_rel . LE expr_pm
   68         | expr_rel . GE expr_pm

    LT  shift, and go to state 115
    GT  shift, and go to state 116
    LE  shift, and go to state 117
    GE  shift, and go to state 118

    $default  reduce using rule 61 (expr_eq)


State 87

   64 expr_rel: expr_pm .
   70 expr_pm: expr_pm . PLUS expr_mdm
   71        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 64 (expr_rel)


State 88

   69 expr_pm: expr_mdm .
   73 expr_mdm: expr_mdm . MUL factor
   74         | expr_mdm . DIV factor
   75         | expr_mdm . MOD factor

    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    MOD  shift, and go to state 123

    $default  reduce using rule 69 (expr_pm)


State 89

   72 expr_mdm: factor .

    $default  reduce using rule 72 (expr_mdm)


State 90

   79 factor: literal .

    $default  reduce using rule 79 (factor)


State 91

   28 vars: COMMA var vars .

    $default  reduce using rule 28 (vars)


State 92

   35 stmt: IF OP . expr_a CP M block
   36     | IF OP . expr_a CP M block ELSE M block

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 124
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 93

   45 fexpr: ID . ASS expr_a

    ASS  shift, and go to state 125


State 94

   37 stmt: FOR fexpr . COMMA expr_a block

    COMMA  shift, and go to state 126


State 95

   50 expr_a: ID OP . expr_rec CP

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    $default  reduce using rule 54 (expr_rec)

    expr_a    go to state 127
    location  go to state 82
    expr_rec  go to state 128
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 96

   52 location: ID OS . expr_a CS
   80 factor: ID OS . expr_a CS

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 129
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 97

   42 method_call: CALLOUT OP . string_literal CP

    string_literal  shift, and go to state 130


State 98

   39 stmt: BREAK SEMCOL .

    $default  reduce using rule 39 (stmt)


State 99

   40 stmt: CONTINUE SEMCOL .

    $default  reduce using rule 40 (stmt)


State 100

   43 Rexpr: OP . expr_a CP

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 131
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 101

   38 stmt: RETURN Rexpr . SEMCOL

    SEMCOL  shift, and go to state 132


State 102

   80 factor: ID . OS expr_a CS
   81       | ID .

    OS  shift, and go to state 133

    $default  reduce using rule 81 (factor)


State 103

   78 factor: MINUS factor .

    $default  reduce using rule 78 (factor)


State 104

   77 factor: NOT factor .

    $default  reduce using rule 77 (factor)


State 105

   76 factor: OP expr_a . CP

    CP  shift, and go to state 134


State 106

   41 stmt: method_call SEMCOL .

    $default  reduce using rule 41 (stmt)


State 107

   34 stmt: expr_a SEMCOL .

    $default  reduce using rule 34 (stmt)


State 108

   47 expr_a: location ASS . expr_or

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_or   go to state 135
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 109

   48 expr_a: location PASS . expr_or

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_or   go to state 136
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 110

   49 expr_a: location MASS . expr_or

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_or   go to state 137
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 111

   58 expr_or: expr_or OR . M expr_and

    $default  reduce using rule 86 (M)

    M  go to state 138


State 112

   60 expr_and: expr_and AND . M expr_eq

    $default  reduce using rule 86 (M)

    M  go to state 139


State 113

   63 expr_eq: expr_eq NE . expr_rel

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_rel  go to state 140
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 114

   62 expr_eq: expr_eq EQ . expr_rel

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_rel  go to state 141
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 115

   65 expr_rel: expr_rel LT . expr_pm

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_pm   go to state 142
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 116

   66 expr_rel: expr_rel GT . expr_pm

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_pm   go to state 143
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 117

   67 expr_rel: expr_rel LE . expr_pm

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_pm   go to state 144
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 118

   68 expr_rel: expr_rel GE . expr_pm

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_pm   go to state 145
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 119

   70 expr_pm: expr_pm PLUS . expr_mdm

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_mdm  go to state 146
    factor    go to state 89
    literal   go to state 90


State 120

   71 expr_pm: expr_pm MINUS . expr_mdm

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_mdm  go to state 147
    factor    go to state 89
    literal   go to state 90


State 121

   73 expr_mdm: expr_mdm MUL . factor

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    factor   go to state 148
    literal  go to state 90


State 122

   74 expr_mdm: expr_mdm DIV . factor

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    factor   go to state 149
    literal  go to state 90


State 123

   75 expr_mdm: expr_mdm MOD . factor

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    factor   go to state 150
    literal  go to state 90


State 124

   35 stmt: IF OP expr_a . CP M block
   36     | IF OP expr_a . CP M block ELSE M block

    CP  shift, and go to state 151


State 125

   45 fexpr: ID ASS . expr_a

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 152
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 126

   37 stmt: FOR fexpr COMMA . expr_a block

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 153
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 127

   53 expr_rec: expr_a . expr_rec2

    COMMA  shift, and go to state 154

    $default  reduce using rule 56 (expr_rec2)

    expr_rec2  go to state 155


State 128

   50 expr_a: ID OP expr_rec . CP

    CP  shift, and go to state 156


State 129

   52 location: ID OS expr_a . CS
   80 factor: ID OS expr_a . CS

    CS  shift, and go to state 157


State 130

   42 method_call: CALLOUT OP string_literal . CP

    CP  shift, and go to state 158


State 131

   43 Rexpr: OP expr_a . CP

    CP  shift, and go to state 159


State 132

   38 stmt: RETURN Rexpr SEMCOL .

    $default  reduce using rule 38 (stmt)


State 133

   80 factor: ID OS . expr_a CS

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 160
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 134

   76 factor: OP expr_a CP .

    $default  reduce using rule 76 (factor)


State 135

   47 expr_a: location ASS expr_or .
   58 expr_or: expr_or . OR M expr_and

    OR  shift, and go to state 111

    $default  reduce using rule 47 (expr_a)


State 136

   48 expr_a: location PASS expr_or .
   58 expr_or: expr_or . OR M expr_and

    OR  shift, and go to state 111

    $default  reduce using rule 48 (expr_a)


State 137

   49 expr_a: location MASS expr_or .
   58 expr_or: expr_or . OR M expr_and

    OR  shift, and go to state 111

    $default  reduce using rule 49 (expr_a)


State 138

   58 expr_or: expr_or OR M . expr_and

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_and  go to state 161
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 139

   60 expr_and: expr_and AND M . expr_eq

    ID              shift, and go to state 102
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_eq   go to state 162
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 140

   63 expr_eq: expr_eq NE expr_rel .
   65 expr_rel: expr_rel . LT expr_pm
   66         | expr_rel . GT expr_pm
   67         | expr_rel . LE expr_pm
   68         | expr_rel . GE expr_pm

    LT  shift, and go to state 115
    GT  shift, and go to state 116
    LE  shift, and go to state 117
    GE  shift, and go to state 118

    $default  reduce using rule 63 (expr_eq)


State 141

   62 expr_eq: expr_eq EQ expr_rel .
   65 expr_rel: expr_rel . LT expr_pm
   66         | expr_rel . GT expr_pm
   67         | expr_rel . LE expr_pm
   68         | expr_rel . GE expr_pm

    LT  shift, and go to state 115
    GT  shift, and go to state 116
    LE  shift, and go to state 117
    GE  shift, and go to state 118

    $default  reduce using rule 62 (expr_eq)


State 142

   65 expr_rel: expr_rel LT expr_pm .
   70 expr_pm: expr_pm . PLUS expr_mdm
   71        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 65 (expr_rel)


State 143

   66 expr_rel: expr_rel GT expr_pm .
   70 expr_pm: expr_pm . PLUS expr_mdm
   71        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 66 (expr_rel)


State 144

   67 expr_rel: expr_rel LE expr_pm .
   70 expr_pm: expr_pm . PLUS expr_mdm
   71        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 67 (expr_rel)


State 145

   68 expr_rel: expr_rel GE expr_pm .
   70 expr_pm: expr_pm . PLUS expr_mdm
   71        | expr_pm . MINUS expr_mdm

    PLUS   shift, and go to state 119
    MINUS  shift, and go to state 120

    $default  reduce using rule 68 (expr_rel)


State 146

   70 expr_pm: expr_pm PLUS expr_mdm .
   73 expr_mdm: expr_mdm . MUL factor
   74         | expr_mdm . DIV factor
   75         | expr_mdm . MOD factor

    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    MOD  shift, and go to state 123

    $default  reduce using rule 70 (expr_pm)


State 147

   71 expr_pm: expr_pm MINUS expr_mdm .
   73 expr_mdm: expr_mdm . MUL factor
   74         | expr_mdm . DIV factor
   75         | expr_mdm . MOD factor

    MUL  shift, and go to state 121
    DIV  shift, and go to state 122
    MOD  shift, and go to state 123

    $default  reduce using rule 71 (expr_pm)


State 148

   73 expr_mdm: expr_mdm MUL factor .

    $default  reduce using rule 73 (expr_mdm)


State 149

   74 expr_mdm: expr_mdm DIV factor .

    $default  reduce using rule 74 (expr_mdm)


State 150

   75 expr_mdm: expr_mdm MOD factor .

    $default  reduce using rule 75 (expr_mdm)


State 151

   35 stmt: IF OP expr_a CP . M block
   36     | IF OP expr_a CP . M block ELSE M block

    $default  reduce using rule 86 (M)

    M  go to state 163


State 152

   45 fexpr: ID ASS expr_a .

    $default  reduce using rule 45 (fexpr)


State 153

   37 stmt: FOR fexpr COMMA expr_a . block

    OB  shift, and go to state 50

    block  go to state 164


State 154

   55 expr_rec2: COMMA . expr_a expr_rec2

    ID              shift, and go to state 70
    bool_literal    shift, and go to state 27
    char_literal    shift, and go to state 28
    string_literal  shift, and go to state 29
    int_literal     shift, and go to state 30
    MINUS           shift, and go to state 75
    NOT             shift, and go to state 76
    OP              shift, and go to state 77

    expr_a    go to state 165
    location  go to state 82
    expr_or   go to state 83
    expr_and  go to state 84
    expr_eq   go to state 85
    expr_rel  go to state 86
    expr_pm   go to state 87
    expr_mdm  go to state 88
    factor    go to state 89
    literal   go to state 90


State 155

   53 expr_rec: expr_a expr_rec2 .

    $default  reduce using rule 53 (expr_rec)


State 156

   50 expr_a: ID OP expr_rec CP .

    $default  reduce using rule 50 (expr_a)


State 157

   52 location: ID OS expr_a CS .
   80 factor: ID OS expr_a CS .

    ASS       reduce using rule 52 (location)
    PASS      reduce using rule 52 (location)
    MASS      reduce using rule 52 (location)
    $default  reduce using rule 80 (factor)


State 158

   42 method_call: CALLOUT OP string_literal CP .

    $default  reduce using rule 42 (method_call)


State 159

   43 Rexpr: OP expr_a CP .

    $default  reduce using rule 43 (Rexpr)


State 160

   80 factor: ID OS expr_a . CS

    CS  shift, and go to state 166


State 161

   58 expr_or: expr_or OR M expr_and .
   60 expr_and: expr_and . AND M expr_eq

    AND  shift, and go to state 112

    $default  reduce using rule 58 (expr_or)


State 162

   60 expr_and: expr_and AND M expr_eq .
   62 expr_eq: expr_eq . EQ expr_rel
   63        | expr_eq . NE expr_rel

    NE  shift, and go to state 113
    EQ  shift, and go to state 114

    $default  reduce using rule 60 (expr_and)


State 163

   35 stmt: IF OP expr_a CP M . block
   36     | IF OP expr_a CP M . block ELSE M block

    OB  shift, and go to state 50

    block  go to state 167


State 164

   37 stmt: FOR fexpr COMMA expr_a block .

    $default  reduce using rule 37 (stmt)


State 165

   55 expr_rec2: COMMA expr_a . expr_rec2

    COMMA  shift, and go to state 154

    $default  reduce using rule 56 (expr_rec2)

    expr_rec2  go to state 168


State 166

   80 factor: ID OS expr_a CS .

    $default  reduce using rule 80 (factor)


State 167

   35 stmt: IF OP expr_a CP M block .
   36     | IF OP expr_a CP M block . ELSE M block

    ELSE  shift, and go to state 169

    $default  reduce using rule 35 (stmt)


State 168

   55 expr_rec2: COMMA expr_a expr_rec2 .

    $default  reduce using rule 55 (expr_rec2)


State 169

   36 stmt: IF OP expr_a CP M block ELSE . M block

    $default  reduce using rule 86 (M)

    M  go to state 170


State 170

   36 stmt: IF OP expr_a CP M block ELSE M . block

    OB  shift, and go to state 50

    block  go to state 171


State 171

   36 stmt: IF OP expr_a CP M block ELSE M block .

    $default  reduce using rule 36 (stmt)
